{
  LOG.info("We are to start the new mesos job scheduler now");
  this.topology=context.getTopology();
  int shardId=0;
  this.executorCmdTemplate=getExecutorCmdTemplate();
  for (  PackingPlan.ContainerPlan container : packing.containers.values()) {
    shardId++;
    String executorCommand=String.format(executorCmdTemplate,shardId);
    executorShardToJob.put(shardId,getBaseJobTemplate(container,executorCommand));
  }
  LOG.info("Wait for jobScheduler's availability");
  startLatch=new CountDownLatch(1);
  mesosJobFramework.setStartNotification(startLatch);
  try {
    if (!startLatch.await(MAX_WAIT_TIMEOUT_MS,TimeUnit.MILLISECONDS)) {
      throw new RuntimeException("Job Scheduler does not recover in expected time!");
    }
  }
 catch (  InterruptedException e) {
    throw new RuntimeException("Mesos Scheduler is interrupted:",e);
  }
  for (  BaseJob job : executorShardToJob.values()) {
    jobScheduler.registerJob(job);
  }
  LOG.info("All containers job have been submitted to new mesos job scheduler");
  LOG.info("The BaseJob Info: ");
  LOG.info(executorShardToJob.toString());
}
