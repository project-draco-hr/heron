{
  String rootPath=String.format("%s/%s",context.getPropertyWithException(MesosConfig.HERON_MESOS_FRAMEWORK_ZOOKEEPER_ROOT),topologyName);
  int connectionTimeoutMs=Integer.parseInt(context.getPropertyWithException(MesosConfig.HERON_MESOS_FRAMEWORK_ZOOKEEPER_CONNECT_TIMEOUT));
  int sessionTimeoutMs=Integer.parseInt(context.getPropertyWithException(MesosConfig.HERON_MESOS_FRAMEWORK_ZOOKEEPER_SESSION_TIMEOUT));
  persistenceStore=new ZkPersistenceStore(context.getPropertyWithException(MesosConfig.HERON_MESOS_FRAMEWORK_ZOOKEEPER_ENDPOINT),connectionTimeoutMs,sessionTimeoutMs,rootPath);
  FrameworkConfiguration frameworkConfig=FrameworkConfiguration.getFrameworkConfiguration();
  frameworkConfig.schedulerName=topologyName + "-framework";
  frameworkConfig.master=context.getPropertyWithException(MesosConfig.MESOS_MASTER_URI_PREFIX);
  frameworkConfig.user=context.getPropertyWithException(Constants.ROLE);
  frameworkConfig.failoverTimeoutSeconds=Integer.parseInt(context.getPropertyWithException(MesosConfig.HERON_MESOS_FRAMEWORK_FAILOVER_TIMEOUT_SECONDS));
  frameworkConfig.reconciliationIntervalInMs=Long.parseLong(context.getPropertyWithException(MesosConfig.HERON_MESOS_FRAMEWORK_RECONCILIATION_INTERVAL_MS));
  frameworkConfig.hostname="";
  MesosTaskBuilder mesosTaskBuilder=new MesosTaskBuilder();
  mesosJobFramework=new MesosJobFramework(mesosTaskBuilder,persistenceStore,frameworkConfig);
  MesosDriverFactory mesosDriver=new MesosDriverFactory(mesosJobFramework,persistenceStore,frameworkConfig);
  JobScheduler jobScheduler=new JobScheduler(mesosJobFramework,persistenceStore,mesosDriver,frameworkConfig);
  return jobScheduler;
}
