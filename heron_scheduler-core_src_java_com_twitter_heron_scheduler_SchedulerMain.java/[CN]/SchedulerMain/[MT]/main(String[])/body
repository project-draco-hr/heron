{
  Options options=constructOptions();
  Options helpOptions=constructHelpOptions();
  CommandLineParser parser=new DefaultParser();
  CommandLine cmd=parser.parse(helpOptions,args,true);
  if (cmd.hasOption("h")) {
    usage(options);
    return;
  }
  try {
    cmd=parser.parse(options,args);
  }
 catch (  ParseException e) {
    usage(options);
    throw new RuntimeException("Error parsing command line options: ",e);
  }
  String topologyName=cmd.getOptionValue("topology_name");
  String topologyDefnFile=TopologyUtils.lookUpTopologyDefnFile(".",topologyName);
  TopologyAPI.Topology topology=TopologyUtils.getTopology(topologyDefnFile);
  Config schedulerConfig=SchedulerConfig.loadConfig(cmd.getOptionValue("cluster"),cmd.getOptionValue("role"),cmd.getOptionValue("environment"),cmd.getOptionValue("topology_jar"),topologyDefnFile,topology);
  setupLogging(schedulerConfig);
  SchedulerMain schedulerMain=new SchedulerMain(schedulerConfig,topology,Integer.parseInt(cmd.getOptionValue("http_port")));
  LOG.log(Level.INFO,"Loaded scheduler config: {0}",schedulerMain.config);
  boolean ret=schedulerMain.runScheduler();
  if (!ret) {
    throw new RuntimeException("Failed to schedule topology: " + topologyName);
  }
 else {
    LOG.log(Level.INFO,"Shutting down topology: {0}",topologyName);
  }
}
