{
  Options options=constructOptions();
  Options helpOptions=constructHelpOptions();
  CommandLineParser parser=new DefaultParser();
  CommandLine cmd=parser.parse(helpOptions,args,true);
  if (cmd.hasOption("h")) {
    usage(options);
    return;
  }
  try {
    cmd=parser.parse(options,args);
  }
 catch (  ParseException e) {
    usage(options);
    throw new RuntimeException("Error parsing command line options: ",e);
  }
  Properties schedulerProperties=cmd.getOptionProperties(Keys.SCHEDULER_COMMAND_LINE_PROPERTIES_OVERRIDE_OPTION);
  String topologyName=cmd.getOptionValue("topology_name");
  SchedulerMain schedulerMain=createInstance(cmd.getOptionValue("cluster"),cmd.getOptionValue("role"),cmd.getOptionValue("environment"),cmd.getOptionValue("topology_jar"),topologyName,Integer.parseInt(cmd.getOptionValue("http_port")),(Boolean)cmd.hasOption("verbose"),schedulerProperties);
  LOG.info("Scheduler command line properties override: " + schedulerProperties.toString());
  boolean ret=schedulerMain.runScheduler();
  if (!ret) {
    throw new RuntimeException("Failed to schedule topology: " + topologyName);
  }
 else {
    LOG.log(Level.INFO,"Shutting down topology: {0}",topologyName);
  }
}
