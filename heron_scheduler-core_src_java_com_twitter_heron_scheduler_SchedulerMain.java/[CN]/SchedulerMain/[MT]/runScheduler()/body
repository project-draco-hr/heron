{
  String statemgrClass=Context.stateManagerClass(config);
  IStateManager statemgr;
  String packingClass=Context.packingClass(config);
  IPacking packing;
  String schedulerClass=Context.schedulerClass(config);
  IScheduler scheduler;
  try {
    statemgr=ReflectionUtils.newInstance(statemgrClass);
    packing=ReflectionUtils.newInstance(packingClass);
    scheduler=ReflectionUtils.newInstance(schedulerClass);
  }
 catch (  IllegalAccessException|InstantiationException|ClassNotFoundException e) {
    LOG.log(Level.SEVERE,"Failed to instantiate instances",e);
    return false;
  }
  SchedulerServer server=null;
  boolean isSuccessful=false;
  try {
    statemgr.initialize(config);
    SchedulerStateManagerAdaptor adaptor=new SchedulerStateManagerAdaptor(statemgr,5000);
    Config runtime=Config.newBuilder().put(Keys.topologyId(),topology.getId()).put(Keys.topologyName(),topology.getName()).put(Keys.topologyDefinition(),topology).put(Keys.schedulerStateManagerAdaptor(),adaptor).put(Keys.numContainers(),1 + TopologyUtils.getNumContainers(topology)).put(Keys.schedulerShutdown(),getShutdown()).build();
    packing.initialize(config,runtime);
    PackingPlan packedPlan=packing.pack();
    if (packedPlan == null) {
      LOG.severe("Failed to pack a valid PackingPlan. Check the config.");
      return false;
    }
    Config ytruntime=Config.newBuilder().putAll(runtime).put(Keys.instanceDistribution(),packedPlan.getInstanceDistribution()).put(Keys.componentRamMap(),packedPlan.getComponentRamDistribution()).build();
    scheduler.initialize(config,ytruntime);
    isSuccessful=scheduler.onSchedule(packedPlan);
    if (!isSuccessful) {
      LOG.severe("Failed to schedule topology");
      return false;
    }
    server=getServer(ytruntime,scheduler,schedulerServerPort);
    server.start();
    isSuccessful=SchedulerUtils.setSchedulerLocation(runtime,String.format("%s:%d",server.getHost(),server.getPort()),scheduler);
    if (isSuccessful) {
      LOG.info("Waiting for termination... ");
      Runtime.schedulerShutdown(ytruntime).await();
    }
  }
 catch (  IOException e) {
    LOG.log(Level.SEVERE,"Failed to start server",e);
    return false;
  }
 finally {
    if (server != null) {
      server.stop();
    }
    SysUtils.closeIgnoringExceptions(scheduler);
    SysUtils.closeIgnoringExceptions(packing);
    SysUtils.closeIgnoringExceptions(statemgr);
  }
  return isSuccessful;
}
