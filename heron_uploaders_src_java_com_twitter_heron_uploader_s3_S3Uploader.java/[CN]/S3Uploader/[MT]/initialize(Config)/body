{
  bucket=S3Context.bucket(config);
  String accessKey=S3Context.accessKey(config);
  String accessSecret=S3Context.secretKey(config);
  String uri=S3Context.uri(config);
  String customRegion=S3Context.region(config);
  if (bucket == null || bucket.isEmpty()) {
    throw new RuntimeException("Missing heron.uploader.s3.bucket config value");
  }
  if (accessKey == null || accessKey.isEmpty()) {
    throw new RuntimeException("Missing heron.uploader.s3.access_key config value");
  }
  if (accessSecret == null || accessSecret.isEmpty()) {
    throw new RuntimeException("Missing heron.uploader.s3.secret_key config value");
  }
  AWSCredentials credentials=new BasicAWSCredentials(accessKey,accessSecret);
  if (uri != null && !uri.isEmpty()) {
    URI uriObj;
    try {
      uriObj=new URI(uri);
    }
 catch (    URISyntaxException e) {
      throw new RuntimeException("Invalid heron.uploader.s3.uri config value");
    }
    ClientConfiguration clientCfg=new ClientConfiguration();
    clientCfg.setProxyHost(uriObj.getHost());
    clientCfg.setProxyPort(uriObj.getPort());
    s3Client=new AmazonS3Client(credentials,clientCfg);
    s3Client.setEndpoint(uri);
    if (customRegion != null) {
      s3Client.setRegion(Region.getRegion(Regions.valueOf(customRegion)));
    }
    final S3ClientOptions clientOptions=S3ClientOptions.builder().setPathStyleAccess(true).disableChunkedEncoding().setPayloadSigningEnabled(true).build();
    s3Client.setS3ClientOptions(clientOptions);
  }
 else {
    s3Client=new AmazonS3Client(credentials);
  }
  final String topologyName=Context.topologyName(config);
  final String topologyPackageLocation=Context.topologyPackageFile(config);
  pathPrefix=S3Context.pathPrefix(config);
  packageFileHandler=new File(topologyPackageLocation);
  remoteFilePath=generateS3Path(pathPrefix,topologyName,packageFileHandler.getName());
  previousVersionFilePath=generateS3Path(pathPrefix,topologyName,"previous_" + packageFileHandler.getName());
}
