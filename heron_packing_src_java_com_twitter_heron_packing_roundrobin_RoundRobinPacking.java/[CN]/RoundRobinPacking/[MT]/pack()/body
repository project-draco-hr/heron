{
  Map<Integer,List<InstanceId>> roundRobinAllocation=getRoundRobinAllocation();
  Map<Integer,Map<InstanceId,Long>> instancesRamMap=getInstancesRamMapInContainer(roundRobinAllocation);
  long containerDiskInBytes=getContainerDiskHint(roundRobinAllocation);
  double containerCpu=getContainerCpuHint(roundRobinAllocation);
  Set<PackingPlan.ContainerPlan> containerPlans=new HashSet<>();
  for (  int containerId : roundRobinAllocation.keySet()) {
    List<InstanceId> instanceList=roundRobinAllocation.get(containerId);
    Map<InstanceId,PackingPlan.InstancePlan> instancePlanMap=new HashMap<>();
    long containerRam=DEFAULT_RAM_PADDING_PER_CONTAINER;
    for (    InstanceId instanceId : instanceList) {
      long instanceRam=instancesRamMap.get(containerId).get(instanceId);
      long instanceDisk=instanceDiskDefault;
      double instanceCpu=instanceCpuDefault;
      Resource resource=new Resource(instanceCpu,instanceRam,instanceDisk);
      instancePlanMap.put(instanceId,new PackingPlan.InstancePlan(instanceId,resource));
      containerRam+=instanceRam;
    }
    Resource resource=new Resource(containerCpu,containerRam,containerDiskInBytes);
    PackingPlan.ContainerPlan containerPlan=new PackingPlan.ContainerPlan(containerId,new HashSet<>(instancePlanMap.values()),resource);
    containerPlans.add(containerPlan);
  }
  PackingPlan plan=new PackingPlan(topology.getId(),containerPlans);
  if (!isValidPackingPlan(plan)) {
    return null;
  }
  return plan;
}
