@classmethod
def spec(cls, name=None, inputs=None, par=1, config=None, optional_outputs=None):
    'Register this bolt to the topology and create ``HeronComponentSpec``\n\n    The usage of this method is compatible with StreamParse API, although it does not create\n    ``ShellBoltSpec`` but instead directly registers to a ``Topology`` class.\n\n    This method takes an optional ``outputs`` argument for supporting dynamic output fields\n    declaration. However, it is recommended that ``outputs`` should be declared as\n    an attribute of your ``Bolt`` subclass. Also, some ways of declaring inputs is not supported\n    in this implementation; please read the documentation below.\n\n    :type name: str\n    :param name: Name of this bolt.\n    :type inputs: dict or list\n    :param inputs: Streams that feed into this Bolt.\n\n                   Two forms of this are acceptable:\n\n                   1. A `dict` mapping from ``HeronComponentSpec`` to ``Grouping``.\n                      In this case, default stream is used.\n                   2. A `dict` mapping from ``GlobalStreamId`` to ``Grouping``.\n                      This ``GlobalStreamId`` object itself is different from StreamParse, because\n                      Heron does not use thrift, although its constructor method is compatible.\n                   3. A `list` of ``HeronComponentSpec``. In this case, default stream with\n                      SHUFFLE grouping is used.\n                   4. A `list` of ``GlobalStreamId``. In this case, SHUFFLE grouping is used.\n    :type par: int\n    :param par: Parallelism hint for this spout.\n    :type config: dict\n    :param config: Component-specific config settings.\n    :type optional_outputs: list of (str or Stream) or tuple of (str or Stream)\n    :param optional_outputs: Additional output fields for this bolt. These fields are added to\n                             existing ``outputs`` class attributes of your bolt. This is an optional\n                             argument, and exists only for supporting dynamic output field\n                             declaration.\n    '
    python_class_path = ('%s.%s' % (cls.__module__, cls.__name__))
    if hasattr(cls, 'outputs'):
        _outputs = copy.copy(cls.outputs)
    else:
        _outputs = []
    if (optional_outputs is not None):
        assert isinstance(optional_outputs, (list, tuple))
        for out in optional_outputs:
            assert isinstance(out, (str, Stream))
            _outputs.append(out)
    return HeronComponentSpec(name, python_class_path, is_spout=False, par=par, inputs=inputs, outputs=_outputs, config=config)
