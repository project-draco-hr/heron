{
  Options options=constructOptions();
  Options helpOptions=constructHelpOptions();
  CommandLineParser parser=new DefaultParser();
  CommandLine cmd=parser.parse(helpOptions,args,true);
  if (cmd.hasOption("h")) {
    usage(options);
    return;
  }
  try {
    cmd=parser.parse(options,args);
  }
 catch (  ParseException e) {
    usage(options);
    throw new RuntimeException("Error parsing command line options: ",e);
  }
  Boolean verbose=false;
  Level logLevel=Level.INFO;
  if (cmd.hasOption("v")) {
    logLevel=Level.ALL;
    verbose=true;
  }
  LoggingHelper.loggerInit(logLevel,false);
  String cluster=cmd.getOptionValue("cluster");
  String role=cmd.getOptionValue("role");
  String environ=cmd.getOptionValue("environment");
  String heronHome=cmd.getOptionValue("heron_home");
  String configPath=cmd.getOptionValue("config_path");
  String overrideConfigFile=cmd.getOptionValue("override_config_file");
  String releaseFile=cmd.getOptionValue("release_file");
  String topologyPackage=cmd.getOptionValue("topology_package");
  String topologyDefnFile=cmd.getOptionValue("topology_defn");
  String topologyJarFile=cmd.getOptionValue("topology_jar");
  TopologyAPI.Topology topology=TopologyUtils.getTopology(topologyDefnFile);
  Config config=Config.expand(Config.newBuilder().putAll(defaultConfigs(heronHome,configPath,releaseFile)).putAll(overrideConfigs(overrideConfigFile)).putAll(commandLineConfigs(cluster,role,environ,verbose)).putAll(topologyConfigs(topologyPackage,topologyJarFile,topologyDefnFile,topology)).build());
  LOG.fine("Static config loaded successfully ");
  LOG.fine(config.toString());
  String statemgrClass=Context.stateManagerClass(config);
  IStateManager statemgr=ReflectionUtils.newInstance(statemgrClass);
  String launcherClass=Context.launcherClass(config);
  ILauncher launcher=ReflectionUtils.newInstance(launcherClass);
  String packingClass=Context.packingClass(config);
  IPacking packing=ReflectionUtils.newInstance(packingClass);
  String uploaderClass=Context.uploaderClass(config);
  IUploader uploader=ReflectionUtils.newInstance(uploaderClass);
  String topologyName=topology.getName();
  boolean isSuccessful=false;
  URI packageURI=null;
  try {
    statemgr.initialize(config);
    SchedulerStateManagerAdaptor adaptor=new SchedulerStateManagerAdaptor(statemgr,5000);
    boolean isValid=validateSubmit(adaptor,topologyName);
    if (isValid) {
      LOG.log(Level.FINE,"Topology {0} to be submitted",topologyName);
      packageURI=uploadPackage(config,uploader);
      if (packageURI == null) {
        LOG.severe("Failed to upload package.");
      }
 else {
        isSuccessful=submitTopology(config,topology,adaptor,launcher,packing,packageURI);
      }
    }
  }
  finally {
    if (!isSuccessful) {
      if (packageURI != null) {
        uploader.undo();
      }
    }
    uploader.close();
    packing.close();
    launcher.close();
    statemgr.close();
  }
  if (!isSuccessful) {
    throw new RuntimeException(String.format("Failed to submit topology %s",topologyName));
  }
 else {
    LOG.log(Level.FINE,"Topology {0} submitted successfully",topologyName);
  }
}
