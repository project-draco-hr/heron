{
  String statemgrClass=Context.stateManagerClass(config);
  IStateManager statemgr;
  String launcherClass=Context.launcherClass(config);
  ILauncher launcher;
  String uploaderClass=Context.uploaderClass(config);
  IUploader uploader;
  try {
    statemgr=ReflectionUtils.newInstance(statemgrClass);
    launcher=ReflectionUtils.newInstance(launcherClass);
    uploader=ReflectionUtils.newInstance(uploaderClass);
  }
 catch (  IllegalAccessException|InstantiationException|ClassNotFoundException e) {
    LOG.log(Level.SEVERE,"Failed to instantiate instances",e);
    return false;
  }
  boolean isSuccessful=false;
  URI packageURI=null;
  try {
    statemgr.initialize(config);
    SchedulerStateManagerAdaptor adaptor=new SchedulerStateManagerAdaptor(statemgr,5000);
    boolean isValid=validateSubmit(adaptor,topology.getName());
    if (isValid) {
      LOG.log(Level.FINE,"Topology {0} to be submitted",topology.getName());
      packageURI=uploadPackage(uploader);
      if (packageURI == null) {
        LOG.severe("Failed to upload package.");
        return false;
      }
 else {
        Config runtime=Config.newBuilder().putAll(LauncherUtils.getInstance().getPrimaryRuntime(topology,adaptor)).put(Keys.topologyPackageUri(),packageURI).put(Keys.launcherClassInstance(),launcher).build();
        isSuccessful=callLauncherRunner(runtime);
      }
    }
  }
  finally {
    if (!isSuccessful) {
      if (packageURI != null) {
        uploader.undo();
      }
    }
    SysUtils.closeIgnoringExceptions(uploader);
    SysUtils.closeIgnoringExceptions(launcher);
    SysUtils.closeIgnoringExceptions(statemgr);
  }
  return isSuccessful;
}
