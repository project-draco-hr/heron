{
  helper.checkOutputSchema(streamId,tuple);
  List<Integer> customGroupingTargetTaskIds=helper.chooseTasksForCustomStreamGrouping(streamId,tuple);
  helper.getTopologyContext().invokeHookEmit(tuple,streamId,customGroupingTargetTaskIds);
  HeronTuples.HeronDataTuple.Builder bldr=HeronTuples.HeronDataTuple.newBuilder();
  bldr.setKey(0);
  if (customGroupingTargetTaskIds != null) {
    for (    Integer taskId : customGroupingTargetTaskIds) {
      bldr.addDestTaskIds(taskId);
    }
  }
  if (messageId != null) {
    RootTupleInfo tupleInfo=new RootTupleInfo(streamId,messageId);
    if (ackingEnabled) {
      HeronTuples.RootId.Builder rtbldr=EstablishRootId(tupleInfo);
      bldr.addRoots(rtbldr);
    }
 else {
      immediateAcks.offer(tupleInfo);
    }
  }
  long tupleSizeInBytes=0;
  long startTime=System.nanoTime();
  for (  Object obj : tuple) {
    byte[] b=serializer.serialize(obj);
    ByteString bstr=ByteString.copyFrom(b);
    bldr.addValues(bstr);
    tupleSizeInBytes+=b.length;
  }
  long latency=System.nanoTime() - startTime;
  spoutMetrics.serializeDataTuple(streamId,latency);
  outputter.addDataTuple(streamId,bldr,tupleSizeInBytes);
  totalTuplesEmitted++;
  spoutMetrics.emittedTuple(streamId);
  return null;
}
