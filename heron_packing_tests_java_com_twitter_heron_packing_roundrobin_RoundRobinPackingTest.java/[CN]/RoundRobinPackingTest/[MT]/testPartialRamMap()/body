{
  int numContainers=2;
  int spoutParallelism=4;
  int boltParallelism=3;
  com.twitter.heron.api.Config topologyConfig=new com.twitter.heron.api.Config();
  topologyConfig.put(com.twitter.heron.api.Config.TOPOLOGY_STMGRS,numContainers);
  long containerRam=10L * Constants.GB;
  long boltRam=1L * Constants.GB;
  topologyConfig.setContainerRamRequested(containerRam);
  topologyConfig.setComponentRam(BOLT_NAME,boltRam);
  TopologyAPI.Topology topologyExplicitRamMap=getTopology(spoutParallelism,boltParallelism,topologyConfig);
  PackingPlan packingPlanExplicitRamMap=getRoundRobinPackingPlan(topologyExplicitRamMap);
  for (  PackingPlan.ContainerPlan containerPlan : packingPlanExplicitRamMap.containers.values()) {
    Assert.assertEquals(containerRam,containerPlan.resource.ram);
    int boltCount=0;
    int instancesCount=containerPlan.instances.size();
    for (    PackingPlan.InstancePlan instancePlan : containerPlan.instances.values()) {
      if (instancePlan.componentName.equals(BOLT_NAME)) {
        Assert.assertEquals(boltRam,instancePlan.resource.ram);
        boltCount++;
      }
    }
    int spoutCount=instancesCount - boltCount;
    for (    PackingPlan.InstancePlan instancePlan : containerPlan.instances.values()) {
      if (instancePlan.componentName.equals(SPOUT_NAME)) {
        Assert.assertEquals((containerRam - boltCount * boltRam - RoundRobinPacking.DEFAULT_RAM_PADDING_PER_CONTAINER) / spoutCount,instancePlan.resource.ram);
      }
    }
  }
}
