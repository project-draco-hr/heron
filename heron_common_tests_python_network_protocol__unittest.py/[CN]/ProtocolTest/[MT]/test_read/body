def test_read(self):
    normal_dispatcher = mock_generator.MockDispatcher()
    normal_dispatcher.prepare_valid_response()
    pkt = IncomingPacket()
    pkt.read(normal_dispatcher)
    self.assertTrue(pkt.is_header_read)
    self.assertTrue(pkt.is_complete)
    header_dispatcher = mock_generator.MockDispatcher()
    header_dispatcher.prepare_header_only()
    pkt = IncomingPacket()
    pkt.read(header_dispatcher)
    self.assertTrue(pkt.is_header_read)
    self.assertFalse(pkt.is_complete)
    self.assertEqual(pkt.data, '')
    partial_data_dispatcher = mock_generator.MockDispatcher()
    partial_data_dispatcher.prepare_partial_data()
    pkt = IncomingPacket()
    pkt.read(partial_data_dispatcher)
    self.assertTrue(pkt.is_header_read)
    self.assertFalse(pkt.is_complete)
    self.assertEqual(len(pkt.data), partial_data_dispatcher.PARTIAL_DATA_SIZE)
    try:
        eagain_dispatcher = mock_generator.MockDispatcher()
        eagain_dispatcher.prepare_eagain()
        pkt = IncomingPacket()
        pkt.read(eagain_dispatcher)
    except Exception:
        self.fail('Exception raised unexpectedly when testing EAGAIN error')
    with self.assertRaises(RuntimeError):
        fatal_dispatcher = mock_generator.MockDispatcher()
        fatal_dispatcher.prepare_fatal()
        pkt = IncomingPacket()
        pkt.read(fatal_dispatcher)
