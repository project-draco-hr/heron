{
  PackingPlanProtoDeserializer deserializer=new PackingPlanProtoDeserializer();
  PackingPlanProtoSerializer serializer=new PackingPlanProtoSerializer();
  PackingPlan currentPackingPlan=deserializer.fromProto(currentProtoPlan);
  Map<String,Integer> componentCounts=currentPackingPlan.getComponentCounts();
  Map<String,Integer> componentChanges=parallelismDelta(componentCounts,changeRequests);
  for (  String componentName : componentChanges.keySet()) {
    Integer change=componentChanges.get(componentName);
    if (change < 0) {
      throw new IllegalArgumentException(String.format("Request made to change component %s parallelism by %d. Scaling component " + "parallelism down is not currently supported.",componentName,change));
    }
  }
  String repackingClass=Context.repackingClass(config);
  IRepacking packing;
  try {
    packing=ReflectionUtils.newInstance(repackingClass);
  }
 catch (  IllegalAccessException|InstantiationException|ClassNotFoundException e) {
    throw new IllegalArgumentException("Failed to instantiate packing instance: " + repackingClass,e);
  }
  try {
    packing.initialize(config,topology);
    PackingPlan packedPlan=packing.repack(currentPackingPlan,componentChanges);
    return serializer.toProto(packedPlan);
  }
  finally {
    SysUtils.closeIgnoringExceptions(packing);
  }
}
