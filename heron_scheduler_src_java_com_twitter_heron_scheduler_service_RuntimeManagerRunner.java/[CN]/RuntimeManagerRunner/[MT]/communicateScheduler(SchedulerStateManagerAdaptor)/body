{
  LOG.info(String.format("Communicating scheduler to %s topology",command.name()));
  Scheduler.SchedulerLocation schedulerLocation=NetworkUtility.awaitResult(stateManager.getSchedulerLocation(),5,TimeUnit.SECONDS);
  if (schedulerLocation == null) {
    LOG.severe("Failed to get Scheduler Location");
    return false;
  }
  if (schedulerLocation.getHttpEndpoint().equals(CuratorStateManager.NO_SCHEDULER_REST_ENDPOINT)) {
    LOG.info("Nothing required to be done on scheduler.");
    return true;
  }
  LOG.info("Scheduler Location: " + schedulerLocation.toString());
  String endpoint=getCommandEndpoint(schedulerLocation,command);
  HttpURLConnection connection;
  try {
    connection=NetworkUtility.getConnection(endpoint);
  }
 catch (  IOException e) {
    LOG.log(Level.SEVERE,"Failed to connect to endpoint: " + endpoint);
    return false;
  }
  if (!sendCommandRequest(connection,command)) {
    LOG.log(Level.SEVERE,"Failed to send request: " + endpoint);
    return false;
  }
  if (!isRequestSuccessful(connection,command)) {
    LOG.severe(String.format("Failed to request %s remotely",command.name()));
    return false;
  }
  connection.disconnect();
  LOG.info("Scheduler activated topology successfully.");
  return true;
}
