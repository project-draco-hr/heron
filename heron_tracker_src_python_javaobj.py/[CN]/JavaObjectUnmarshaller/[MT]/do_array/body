def do_array(self, parent=None, ident=0):
    log_debug('[array]', ident)
    (_, classdesc) = self._read_and_exec_opcode(ident=(ident + 1), expect=[self.TC_CLASSDESC, self.TC_PROXYCLASSDESC, self.TC_NULL, self.TC_REFERENCE])
    array = []
    self._add_reference(array)
    (size,) = self._readStruct('>i')
    log_debug(('size: ' + str(size)), ident)
    type_char = classdesc.name[0]
    assert (type_char == self.TYPE_ARRAY)
    type_char = classdesc.name[1]
    if ((type_char == self.TYPE_OBJECT) or (type_char == self.TYPE_ARRAY)):
        for _ in range(size):
            (_, res) = self._read_and_exec_opcode(ident=(ident + 1))
            log_debug(('Object value: %s' % str(res)), ident)
            array.append(res)
    else:
        for _ in range(size):
            res = self._read_value(type_char, ident)
            log_debug(('Native value: %s' % str(res)), ident)
            array.append(res)
    return array
