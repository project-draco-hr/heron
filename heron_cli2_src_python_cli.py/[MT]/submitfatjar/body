def submitfatjar(namespace):
    'Syntax: heron-cli submitfatjar <dc>/<role>/<environ> topology-jar-path class args\n\n  WARNING: jar format will be depricated soon. Use tar\n  compressed format instead.\n\n  We use the packer to make a package for the jar and dump it\n  to a well-known location. We then run the main method of class\n  with the specified arguments. We pass arguments as heron.options.\n  This will run the jar file with the klass name. The HeronSubmitter\n  inside will write out the topology defn file to a location that\n  we specify. Then we write the topology defn file to a well known\n  packer location. We then write to appropriate places in zookeeper\n  and launch the aurora jobs\n  '
    jarfile = namespace['filepath']
    klass = namespace['classname']
    args = tuple(namespace['heron_unknown_args'])
    print 'Deprecation Warning: fatjar will be deprecated soon. Please use tar format ..'
    tmpdir = tempfile.mkdtemp()
    set_config_opt('cmdline.topologydefn.tmpdirectory', tmpdir)
    if namespace['deactivated']:
        initial_state = topology_pb2.TopologyState.Name(topology_pb2.PAUSED)
    else:
        initial_state = topology_pb2.TopologyState.Name(topology_pb2.RUNNING)
    set_config_opt('cmdline.topology.initial.state', initial_state)
    exec_heron_class(klass, get_heron_libs(TOPOLOGY_RUN_JARS), extrajars=[jarfile], args=args)
    try:
        scheduler_overrides = ((namespace['config-overrides'] + ' ') + pass_cmdline_override(namespace))
        launch_all_topologies_found(jarfile, tmpdir, namespace['config_loader'], namespace['config_path'], scheduler_overrides)
    finally:
        shutil.rmtree(tmpdir)
