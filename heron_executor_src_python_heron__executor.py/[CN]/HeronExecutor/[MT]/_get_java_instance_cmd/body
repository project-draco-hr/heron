def _get_java_instance_cmd(self, instance_info):
    retval = {}
    code_cache_size_mb = 64
    perm_gen_size_mb = 128
    for (instance_id, component_name, global_task_id, component_index) in instance_info:
        total_jvm_size = int((self.component_rammap[component_name] / (1024 * 1024)))
        heap_size_mb = ((total_jvm_size - code_cache_size_mb) - perm_gen_size_mb)
        Log.info(('component name: %s, ram request: %d, total jvm size: %dM, cache size: %dM, perm size: %dM' % (component_name, self.component_rammap[component_name], total_jvm_size, code_cache_size_mb, perm_gen_size_mb)))
        xmn_size = int((heap_size_mb / 2))
        instance_cmd = [os.path.join(self.heron_java_home, 'bin/java'), ('-Xmx%dM' % heap_size_mb), ('-Xms%dM' % heap_size_mb), ('-Xmn%dM' % xmn_size), ('-XX:MaxPermSize=%dM' % perm_gen_size_mb), ('-XX:PermSize=%dM' % perm_gen_size_mb), ('-XX:ReservedCodeCacheSize=%dM' % code_cache_size_mb), '-XX:+CMSScavengeBeforeRemark', '-XX:TargetSurvivorRatio=90', '-XX:+PrintCommandLineFlags', '-verbosegc', '-XX:+PrintGCDetails', '-XX:+PrintGCTimeStamps', '-XX:+PrintGCDateStamps', '-XX:+PrintGCCause', '-XX:+PrintPromotionFailure', '-XX:+PrintTenuringDistribution', '-XX:+PrintHeapAtGC', '-XX:+HeapDumpOnOutOfMemoryError', '-XX:+UseConcMarkSweepGC', '-XX:ParallelGCThreads=4', ('-Xloggc:log-files/gc.%s.log' % instance_id)]
        instance_cmd = (instance_cmd + self.instance_jvm_opts.split())
        if (component_name in self.component_jvm_opts):
            instance_cmd = (instance_cmd + self.component_jvm_opts[component_name].split())
        instance_cmd.extend(['-Djava.net.preferIPv4Stack=true', '-cp', ('%s:%s' % (self.instance_classpath, self.classpath)), 'com.twitter.heron.instance.HeronInstance', self.topology_name, self.topology_id, instance_id, component_name, global_task_id, component_index, self.stmgr_ids[(self.shard - 1)], self.master_port, self.metricsmgr_port, self.heron_internals_config_file])
        retval[instance_id] = instance_cmd
    return retval
