def __get_state_manager_locations(self, state_manager_config_file='heron-conf/statemgr.yaml'):
    ' reads configs to determine which state manager to use '
    with open(state_manager_config_file, 'r') as stream:
        config = yaml.load(stream)
    state_manager_location = {'type': 'file', 'name': 'local', 'tunnelhost': 'localhost', 'rootpath': '~/.herondata/repository/state/local', }
    if ('heron.statemgr.connection.string' in config):
        state_manager_location['hostport'] = config['heron.statemgr.connection.string']
    if ('heron.statemgr.tunnel.host' in config):
        state_manager_location['tunnelhost'] = config['heron.statemgr.tunnel.host']
    state_manager_class = config['heron.class.state.manager']
    if (state_manager_class == 'com.twitter.heron.statemgr.zookeeper.curator.CuratorStateManager'):
        state_manager_location['type'] = 'zookeeper'
        state_manager_location['name'] = 'zk'
        if ('heron.statemgr.root.path' in config):
            state_manager_location['rootpath'] = config['heron.statemgr.root.path']
    elif (state_manager_class != 'com.twitter.heron.statemgr.localfs.LocalFileSystemStateManager'):
        Log.error(('FATAL: unrecognized heron.class.state.manager found in %s: %s' % (state_manager_config_file, config)))
        sys.exit(1)
    Log.info(('state manager configs: %s ' % state_manager_location))
    return [state_manager_location]
