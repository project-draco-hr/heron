def __init__(self, args, shell_env):
    self.shell_env = shell_env
    self.max_runs = 100
    self.interval_between_runs = 10
    self.shard = int(args[1])
    self.topology_name = args[2]
    self.topology_id = args[3]
    self.topology_defn_file = args[4]
    self.zknode = args[6]
    self.zkroot = args[7]
    self.tmaster_binary = args[8]
    self.stmgr_binary = args[9]
    self.metricsmgr_classpath = args[10]
    self.instance_jvm_opts = base64.b64decode(args[11].lstrip('"').rstrip('"').replace('&equals;', '='))
    self.classpath = args[12]
    self.master_port = args[13]
    self.tmaster_controller_port = args[14]
    self.tmaster_stats_port = args[15]
    self.heron_internals_config_file = args[16]
    self.component_rammap = map((lambda x: {x.split(':')[0]: int(x.split(':')[1]), }), args[17].split(','))
    self.component_rammap = reduce((lambda x, y: dict((x.items() + y.items()))), self.component_rammap)
    self.component_jvm_opts = {}
    component_jvm_opts_in_json = base64.b64decode(args[18].lstrip('"').rstrip('"').replace('&equals;', '='))
    if (component_jvm_opts_in_json != ''):
        for (k, v) in json.loads(component_jvm_opts_in_json).items():
            self.component_jvm_opts[base64.b64decode(k)] = base64.b64decode(v)
    self.pkg_type = args[19]
    self.topology_bin_file = args[20]
    self.heron_java_home = args[21]
    self.shell_port = args[22]
    self.heron_shell_binary = args[23]
    self.metricsmgr_port = args[24]
    self.cluster = args[25]
    self.role = args[26]
    self.environ = args[27]
    self.instance_classpath = args[28]
    self.metrics_sinks_config_file = args[29]
    self.scheduler_classpath = args[30]
    self.scheduler_port = args[31]
    self.python_instance_binary = args[32]
    self.log_dir = self._load_logging_dir(self.heron_internals_config_file)
    self.instance_distribution = {}
    self.stmgr_ids = []
    self.metricsmgr_ids = []
    self.heron_shell_ids = []
    self.update_instance_distribution(self.parse_instance_distribution(args[5]))
    self.processes_to_monitor = {}
    log_pid_for_process(get_heron_executor_process_name(self.shard), os.getpid())
