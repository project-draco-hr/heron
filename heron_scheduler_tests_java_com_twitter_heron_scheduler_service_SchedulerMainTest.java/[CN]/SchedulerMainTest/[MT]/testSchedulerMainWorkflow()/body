{
  SchedulerServer server=mock(SchedulerServer.class);
  IConfigLoader config=createConfig();
  String configLoader=config.getClass().getName();
  String schedulerClass=config.getSchedulerClass();
  String packingAlgorithmClass=config.getPackingAlgorithmClass();
  PowerMockito.spy(SchedulerMain.class);
  PowerMockito.spy(Factory.class);
  PowerMockito.doReturn(config).when(Factory.class,"makeConfigLoader",eq(configLoader));
  PowerMockito.doReturn(mock(IStateManager.class)).when(Factory.class,"makeStateManager",anyString());
  IScheduler scheduler=spy(new Nullity.NullScheduler());
  PowerMockito.doReturn(scheduler).when(Factory.class,"makeScheduler",eq(schedulerClass));
  IPackingAlgorithm packingAlgorithm=spy(new Nullity.EmptyPacking());
  PowerMockito.doReturn(packingAlgorithm).when(Factory.class,"makePackingAlgorithm",eq(packingAlgorithmClass));
  PowerMockito.doReturn(server).when(SchedulerMain.class,"runServer",any(IScheduler.class),any(LaunchContext.class),anyInt());
  PowerMockito.doNothing().when(SchedulerMain.class,"setSchedulerLocation",any(LaunchContext.class),any(SchedulerServer.class));
  SchedulerMain.runScheduler(config.getSchedulerClass(),configLoader,"",NetworkUtility.getFreePort(),"",TopologyAPI.Topology.getDefaultInstance());
  verify(scheduler,times(1)).initialize(any(LaunchContext.class));
  verify(scheduler,atLeastOnce()).schedule(any(PackingPlan.class));
}
