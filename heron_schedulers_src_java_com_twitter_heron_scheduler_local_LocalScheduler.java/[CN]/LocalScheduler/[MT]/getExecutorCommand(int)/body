{
  TopologyAPI.Topology topology=Runtime.topology(runtime);
  int port1=NetworkUtils.getFreePort();
  int port2=NetworkUtils.getFreePort();
  int port3=NetworkUtils.getFreePort();
  int shellPort=NetworkUtils.getFreePort();
  int port4=NetworkUtils.getFreePort();
  if (port1 == -1 || port2 == -1 || port3 == -1 || shellPort == -1 || port4 == -1) {
    throw new RuntimeException("Failed to find available ports to start topology");
  }
  String executorCmd=String.format("%s %d %s %s %s %s %s %s %s %s %s %s %s %s %s %s " + "%s %s %s %s %s %s %d %s %s %d %s %s %s %s %s %s %d",LocalContext.executorSandboxBinary(config),container,topology.getName(),topology.getId(),FilenameUtils.getName(LocalContext.topologyDefinitionFile(config)),Runtime.instanceDistribution(runtime),LocalContext.stateManagerConnectionString(config),LocalContext.stateManagerRootPath(config),LocalContext.tmasterSandboxBinary(config),LocalContext.stmgrSandboxBinary(config),LocalContext.metricsManagerSandboxClassPath(config),formatJavaOpts(TopologyUtils.getInstanceJvmOptions(topology)),TopologyUtils.makeClassPath(topology,LocalContext.topologyJarFile(config)),port1,port2,port3,LocalContext.systemConfigSandboxFile(config),TopologyUtils.formatRamMap(TopologyUtils.getComponentRamMap(topology,LocalContext.instanceRam(config))),formatJavaOpts(TopologyUtils.getComponentJvmOptions(topology)),LocalContext.topologyPackageType(config),LocalContext.topologyJarFile(config),LocalContext.javaSandboxHome(config),shellPort,LocalContext.logSandboxDirectory(config),LocalContext.shellSandboxBinary(config),port4,LocalContext.cluster(config),LocalContext.role(config),LocalContext.environ(config),LocalContext.instanceSandboxClassPath(config),LocalContext.metricsSinksSandboxFile(config),"no_need_since_scheduler_is_started",0);
  LOG.info("Executor command line: " + executorCmd.toString());
  return executorCmd;
}
