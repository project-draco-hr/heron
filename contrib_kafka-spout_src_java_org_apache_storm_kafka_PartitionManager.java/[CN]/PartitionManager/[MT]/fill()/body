{
  long start=System.currentTimeMillis();
  Long offset;
  offset=this.failedMsgRetryManager.nextFailedMessageToRetry();
  final boolean processingNewTuples=offset == null;
  if (processingNewTuples) {
    offset=emittedToOffset;
  }
  ByteBufferMessageSet msgs=null;
  try {
    msgs=KafkaUtils.fetchMessages(spoutConfig,consumer,partition,offset);
  }
 catch (  TopicOffsetOutOfRangeException e) {
    offset=KafkaUtils.getOffset(consumer,partition.topic,partition.partition,kafka.api.OffsetRequest.EarliestTime());
    if (!processingNewTuples) {
      Set<Long> omitted=this.failedMsgRetryManager.clearOffsetsBefore(offset);
      if (null != omitted) {
        lostMessageCount.incrBy(omitted.size());
      }
      LOG.warn("Removing the failed offsets for {} that are out of range: {}",partition,omitted);
    }
    if (offset > emittedToOffset) {
      lostMessageCount.incrBy(offset - emittedToOffset);
      emittedToOffset=offset;
      LOG.warn("{} Using new offset: {}",partition,emittedToOffset);
    }
    return;
  }
  long millis=System.currentTimeMillis() - start;
  fetchAPILatencyMax.update(millis);
  fetchAPILatencyMean.update(millis);
  fetchAPICallCount.incr();
  if (msgs != null) {
    int numMessages=0;
    for (    MessageAndOffset msg : msgs) {
      final Long curOffset=msg.offset();
      if (curOffset < offset) {
        continue;
      }
      if (processingNewTuples || this.failedMsgRetryManager.shouldReEmitMsg(curOffset)) {
        numMessages+=1;
        if (!pending.containsKey(curOffset)) {
          pending.put(curOffset,System.currentTimeMillis());
        }
        waitingToEmit.add(msg);
        emittedToOffset=Math.max(msg.nextOffset(),emittedToOffset);
        if (failedMsgRetryManager.shouldReEmitMsg(curOffset)) {
          this.failedMsgRetryManager.retryStarted(curOffset);
        }
      }
    }
    fetchAPIMessageCount.incrBy(numMessages);
  }
}
