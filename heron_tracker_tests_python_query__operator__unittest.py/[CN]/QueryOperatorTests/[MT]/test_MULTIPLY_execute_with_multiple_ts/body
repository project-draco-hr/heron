@tornado.testing.gen_test
def test_MULTIPLY_execute_with_multiple_ts(self):
    ts = Mock()
    ts2 = Mock()
    operator = Multiply([ts, ts2])
    tmaster = Mock()
    tracker = Mock()
    start = 100
    end = 300

    @tornado.gen.coroutine
    def ts_side_effect3(*args):
        self.assertEqual((tracker, tmaster, 100, 300), args)
        raise tornado.gen.Return([Metrics('component', 'metricName', 'instance', start, end, {120: 1.0, 180: 1.0, 240: 1.0, 300: 1.0, }), Metrics('component', 'metricName', 'instance2', start, end, {120: 2.0, 180: 2.0, 240: 2.0, 300: 2.0, }), Metrics('component', 'metricName', 'instance3', start, end, {120: 3.0, 180: 3.0, 240: 3.0, 300: 3.0, }), Metrics('component', 'metricName', 'instance4', start, end, {120: 4.0, 180: 4.0, 240: 4.0, 300: 4.0, }), Metrics('component', 'metricName', 'instance5', start, end, {120: 5.0, 180: 5.0, 240: 5.0, 300: 5.0, })])
    ts.execute.side_effect = ts_side_effect3

    @tornado.gen.coroutine
    def ts_side_effect4(*args):
        self.assertEqual((tracker, tmaster, 100, 300), args)
        raise tornado.gen.Return([Metrics('component', 'metricName', 'instance', start, end, {120: 2.0, 180: 2.0, 240: 2.0, 300: 2.0, }), Metrics('component', 'metricName', 'instance2', start, end, {120: 4.0, 180: 4.0, 240: 4.0, 300: 4.0, }), Metrics('component', 'metricName', 'instance3', start, end, {120: 6.0, 180: 6.0, 240: 6.0, 300: 6.0, }), Metrics('component', 'metricName', 'instance4', start, end, {120: 8.0, 180: 8.0, 240: 8.0, 300: 8.0, }), Metrics('component', 'metricName', 'instance5', start, end, {120: 10.0, 180: 10.0, 240: 10.0, 300: 10.0, })])
    ts2.execute.side_effect = ts_side_effect4
    metrics = yield operator.execute(tracker, tmaster, start, end)
    self.assertEqual(5, len(metrics))
    for metric in metrics:
        if (metric.instance == 'instance'):
            self.assertDictEqual({120: 2, 180: 2, 240: 2, 300: 2, }, metric.timeline)
        elif (metric.instance == 'instance2'):
            self.assertDictEqual({120: 8, 180: 8, 240: 8, 300: 8, }, metric.timeline)
        elif (metric.instance == 'instance3'):
            self.assertDictEqual({120: 18, 180: 18, 240: 18, 300: 18, }, metric.timeline)
        elif (metric.instance == 'instance4'):
            self.assertDictEqual({120: 32, 180: 32, 240: 32, 300: 32, }, metric.timeline)
        elif (metric.instance == 'instance5'):
            self.assertDictEqual({120: 50, 180: 50, 240: 50, 300: 50, }, metric.timeline)
