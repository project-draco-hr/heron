@tornado.testing.gen_test
def test_TS_execute_with_multiple_instances(self):
    ts = TS(['a', 'b', 'c'])
    tmaster = Mock()
    tracker = Mock()
    start = 100
    end = 300

    @tornado.gen.coroutine
    def tracker_side_effect3(*args):
        self.assertEqual((tmaster, 'a', ['c'], [], 40, 360), args)
        raise tornado.gen.Return({'starttime': 40, 'endtime': 360, 'component': 'a', 'timeline': {'c': {'b': {40: '1.0', 100: '1.0', 220: '1.0', 280: '1.0', 340: '1.0', }, 'd': {40: '2.0', 100: '2.0', 160: '2.0', 220: '2.0', 280: '2.0', 340: '2.0', }, }, }, })
    tracker.getMetricsTimeline.side_effect = tracker_side_effect3
    ts = TS(['a', '*', 'c'])
    metrics = yield ts.execute(tracker, tmaster, start, end)
    self.assertEqual(2, len(metrics))
    metric1 = metrics[0]
    metric2 = metrics[1]
    for metric in metrics:
        if (metric.instance == 'b'):
            self.assertEqual('c', metric.metricName)
            self.assertEqual('a', metric.componentName)
            self.assertDictEqual({180: 1.0, 240: 1.0, 300: 1.0, }, metric.timeline)
        elif (metric.instance == 'd'):
            self.assertEqual('c', metric.metricName)
            self.assertEqual('a', metric.componentName)
            self.assertDictEqual({120: 2.0, 180: 2.0, 240: 2.0, 300: 2.0, }, metric.timeline)
        else:
            self.assertTrue(False, 'Wrong metrics generated by TS.execute')
