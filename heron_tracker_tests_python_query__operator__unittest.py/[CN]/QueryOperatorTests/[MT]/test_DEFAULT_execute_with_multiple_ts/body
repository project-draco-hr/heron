@tornado.testing.gen_test
def test_DEFAULT_execute_with_multiple_ts(self):
    ts = Mock()
    default = Default([float(0), ts])
    tmaster = Mock()
    tracker = Mock()
    start = 100
    end = 300

    @tornado.gen.coroutine
    def ts_side_effect3(*args):
        self.assertEqual((tracker, tmaster, 100, 300), args)
        raise tornado.gen.Return([Metrics('component', 'metricName', 'instance', start, end, {180: 1.0, 240: 1.0, 300: 1.0, }), Metrics('component', 'metricName', 'instance2', start, end, {120: 2.0, 240: 2.0, })])
    ts.execute.side_effect = ts_side_effect3
    metrics = yield default.execute(tracker, tmaster, start, end)
    self.assertEqual(2, len(metrics))
    for metric in metrics:
        if (metric.instance == 'instance'):
            self.assertEqual('instance', metric.instance)
            self.assertEqual('metricName', metric.metricName)
            self.assertEqual('component', metric.componentName)
            self.assertDictEqual({120: 0, 180: 1.0, 240: 1.0, 300: 1.0, }, metric.timeline)
        elif (metric.instance == 'instance2'):
            self.assertEqual('instance2', metric.instance)
            self.assertEqual('metricName', metric.metricName)
            self.assertEqual('component', metric.componentName)
            self.assertDictEqual({120: 2.0, 180: 0, 240: 2.0, 300: 0, }, metric.timeline)
        else:
            self.assertTrue(False, 'Wrong metrics generated by TS.execute')
