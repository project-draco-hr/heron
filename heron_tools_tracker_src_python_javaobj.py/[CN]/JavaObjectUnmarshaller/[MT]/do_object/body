def do_object(self, parent=None, ident=0):
    java_object = JavaObject()
    log_debug('[object]', ident)
    log_debug(('java_object.annotations just after instantination: ' + str(java_object.annotations)), ident)
    (opcode, classdesc) = self._read_and_exec_opcode(ident=(ident + 1), expect=[self.TC_CLASSDESC, self.TC_PROXYCLASSDESC, self.TC_NULL, self.TC_REFERENCE])
    self._add_reference(java_object)
    java_object.classdesc = classdesc
    if ((classdesc.flags & self.SC_EXTERNALIZABLE) and (not (classdesc.flags & self.SC_BLOCK_DATA))):
        raise NotImplementedError("externalContents isn't implemented yet")
    if (classdesc.flags & self.SC_SERIALIZABLE):
        tempclass = classdesc
        megalist = []
        megatypes = []
        while tempclass:
            log_debug(((('>>> ' + str(tempclass.fields_names)) + ' ') + str(tempclass)), ident)
            log_debug(('>>> ' + str(tempclass.fields_types)), ident)
            fieldscopy = tempclass.fields_names[:]
            fieldscopy.extend(megalist)
            megalist = fieldscopy
            fieldscopy = tempclass.fields_types[:]
            fieldscopy.extend(megatypes)
            megatypes = fieldscopy
            tempclass = tempclass.superclass
        log_debug(('Values count: %s' % str(len(megalist))), ident)
        log_debug(('Prepared list of values: %s' % str(megalist)), ident)
        log_debug(('Prepared list of types: %s' % str(megatypes)), ident)
        for (field_name, field_type) in zip(megalist, megatypes):
            res = self._read_value(field_type, ident, name=field_name)
            java_object.__setattr__(field_name, res)
    if (((classdesc.flags & self.SC_SERIALIZABLE) and (classdesc.flags & self.SC_WRITE_METHOD)) or ((classdesc.flags & self.SC_EXTERNALIZABLE) and (classdesc.flags & self.SC_BLOCK_DATA))):
        log_debug(('java_object.annotations before: ' + str(java_object.annotations)), ident)
        while (opcode != self.TC_ENDBLOCKDATA):
            (opcode, obj) = self._read_and_exec_opcode(ident=(ident + 1))
            if (opcode != self.TC_ENDBLOCKDATA):
                java_object.annotations.append(obj)
            log_debug(('objectAnnotation value: ' + str(obj)), ident)
        log_debug(('java_object.annotations after: ' + str(java_object.annotations)), ident)
    for transformer in self.object_transformers:
        tmp_object = transformer.transform(java_object)
        if (tmp_object != java_object):
            java_object = tmp_object
            break
    log_debug(('>>> java_object: ' + str(java_object)), ident)
    return java_object
