{
  PackingPlanProtoSerializer serializer=new PackingPlanProtoSerializer();
  PackingPlan currentPacking=new PackingPlan("current",currentContainerPlan);
  PackingPlan proposedPacking=new PackingPlan("proposed",proposedContainerPlan);
  PackingPlans.PackingPlan currentProtoPlan=serializer.toProto(currentPacking);
  PackingPlans.PackingPlan proposedProtoPlan=serializer.toProto(proposedPacking);
  SchedulerStateManagerAdaptor mockStateMgr=Mockito.mock(SchedulerStateManagerAdaptor.class);
  when(mockStateMgr.getPhysicalPlan(TOPOLOGY_NAME)).thenReturn(PhysicalPlans.PhysicalPlan.getDefaultInstance());
  Config mockConfig=Mockito.mock(Config.class);
  Config mockRuntime=Mockito.mock(Config.class);
  when(mockRuntime.getStringValue(Keys.topologyName())).thenReturn(TOPOLOGY_NAME);
  when(mockRuntime.get(Keys.schedulerStateManagerAdaptor())).thenReturn(mockStateMgr);
  IScalable mockScheduler=Mockito.mock(IScalable.class);
  UpdateTopologyManager updateManager=new UpdateTopologyManager(mockConfig,mockRuntime,Optional.of(mockScheduler));
  UpdateTopologyManager spyUpdateManager=Mockito.spy(updateManager);
  TopologyAPI.Topology topology=TopologyTests.createTopology(TOPOLOGY_NAME,new com.twitter.heron.api.Config(),"spoutname","boltname",1,1);
  Mockito.doReturn(topology).when(spyUpdateManager).getUpdatedTopology(TOPOLOGY_NAME,proposedPacking,mockStateMgr);
  Mockito.doReturn(topology).when(mockStateMgr).getTopology(TOPOLOGY_NAME);
  Assert.assertEquals(TopologyAPI.TopologyState.RUNNING,topology.getState());
  PowerMockito.spy(TMasterUtils.class);
  PowerMockito.doReturn(true).when(TMasterUtils.class,"sendToTMaster",any(String.class),eq(TOPOLOGY_NAME),eq(mockStateMgr),any(NetworkUtils.TunnelConfig.class));
  spyUpdateManager.updateTopology(currentProtoPlan,proposedProtoPlan);
  Mockito.verify(spyUpdateManager).deactivateTopology(eq(mockStateMgr),eq(topology));
  Mockito.verify(spyUpdateManager).reactivateTopology(eq(mockStateMgr),eq(topology),eq(2));
  Mockito.verify(mockScheduler).addContainers(expectedContainersToAdd);
  Mockito.verify(mockScheduler).removeContainers(expectedContainersToRemove);
  PowerMockito.verifyStatic(times(1));
  TMasterUtils.transitionTopologyState(eq(TOPOLOGY_NAME),eq(TMasterUtils.TMasterCommand.DEACTIVATE),eq(mockStateMgr),eq(TopologyAPI.TopologyState.RUNNING),eq(TopologyAPI.TopologyState.PAUSED),any(NetworkUtils.TunnelConfig.class));
  PowerMockito.verifyStatic(times(1));
  TMasterUtils.transitionTopologyState(eq(TOPOLOGY_NAME),eq(TMasterUtils.TMasterCommand.ACTIVATE),eq(mockStateMgr),eq(TopologyAPI.TopologyState.PAUSED),eq(TopologyAPI.TopologyState.RUNNING),any(NetworkUtils.TunnelConfig.class));
}
