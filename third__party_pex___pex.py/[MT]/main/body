def main():
    parser = optparse.OptionParser(usage='usage: %prog [options] output')
    parser.add_option('--entry-point', default='__main__')
    parser.add_option('--no-pypi', action='store_false', dest='pypi', default=True)
    parser.add_option('--not-zip-safe', action='store_false', dest='zip_safe', default=True)
    parser.add_option('--python', default='/usr/bin/python2.7')
    parser.add_option('--find-links', dest='find_links', default='')
    (options, args) = parser.parse_args()
    if (len(args) == 2):
        output = args[0]
        manifest_text = open(args[1], 'r').read()
    elif (len(args) == 1):
        output = args[0]
        manifest_text = sys.stdin.read()
    else:
        parser.error("'output' positional argument is required")
        return 1
    if (manifest_text.startswith('"') and manifest_text.endswith('"')):
        manifest_text = manifest_text[1:(len(manifest_text) - 1)]
    with open(os.path.join(tempfile.mkdtemp(dir='/tmp'), 'stderr'), 'w') as x:
        x.write(manifest_text)
    manifest = parse_manifest(manifest_text)
    tmp_dir = tempfile.mkdtemp()
    try:
        (pparser, resolver_options_builder) = configure_clp()
        (poptions, preqs) = pparser.parse_args((['--no-use-wheel'] + sys.argv))
        poptions.entry_point = options.entry_point
        poptions.find_links = options.find_links
        poptions.pypi = options.pypi
        poptions.python = options.python
        poptions.zip_safe = options.zip_safe
        print(('pex options: %s' % poptions))
        os.environ['PATH'] = ('.:%s:/bin:/usr/bin' % poptions.python)
        interpreter = PythonInterpreter(poptions.python, PythonInterpreter.from_binary(options.python).identity, extras={('setuptools', '18.0.1'): 'third_party/pex/setuptools-18.0.1-py2.py3-none-any.whl', ('wheel', '0.23.0'): 'third_party/pex/wheel-0.23.0-py2.7.egg', })
        interpreter = resolve_or_die(interpreter, SETUPTOOLS_REQUIREMENT, poptions)
        if (interpreter and poptions.use_wheel):
            interpreter = resolve_or_die(interpreter, WHEEL_REQUIREMENT, poptions)
        reqs = manifest.get('requirements', {}).keys()
        if (len(reqs) > 0):
            print(('pex requirements: %s' % reqs))
        pex_builder = build_pex(reqs, poptions, resolver_options_builder, interpreter=interpreter)
        pex_builder.info.zip_safe = options.zip_safe
        pex_builder.info.entry_point = options.entry_point
        pex_builder.add_source(dereference_symlinks(pkg_resources_py), os.path.join(pex_builder.BOOTSTRAP_DIR, 'pkg_resources.py'))
        for (dst, src) in manifest['modules'].iteritems():
            try:
                pex_builder.add_source(dereference_symlinks(src), dst)
            except OSError as e:
                raise Exception('Failed to add {}: {}'.format(src, e))
        for (dst, src) in manifest['resources'].iteritems():
            pex_builder.add_resource(dereference_symlinks(src), dst)
        for req in manifest.get('prebuiltLibraries', []):
            try:
                pex_builder.add_dist_location(req)
            except Exception as e:
                raise Exception('Failed to add {}: {}'.format(req, e))
        pex_builder.build(output)
    finally:
        shutil.rmtree(tmp_dir, True)
