{
  long rotateIntervalNs=Constants.SECONDS_TO_NANOSECONDS * timeoutSec / nBuckets + (Constants.SECONDS_TO_NANOSECONDS * timeoutSec) % nBuckets;
  WakeableLooper looper=Mockito.mock(WakeableLooper.class);
  XORManager g=new XORManager(looper,timeoutSec,taskIds,nBuckets);
  Mockito.verify(looper).registerTimerEventInNanoSeconds(Mockito.eq(Constants.SECONDS_TO_NANOSECONDS * timeoutSec),Mockito.any(Runnable.class));
  for (int i=0; i < 100; ++i) {
    g.create(1,i,1);
  }
  for (int i=0; i < 100; ++i) {
    Assert.assertEquals(g.anchor(1,i,1),true);
    Assert.assertEquals(g.remove(1,i),true);
  }
  List<Long> thingsAdded=new LinkedList<>();
  Random random=new Random();
  Long firstKey=random.nextLong();
  g.create(1,1,firstKey);
  thingsAdded.add(firstKey);
  for (int j=1; j < 100; ++j) {
    long key=random.nextLong();
    thingsAdded.add(key);
    Assert.assertEquals(g.anchor(1,1,key),false);
  }
  for (int j=0; j < 99; ++j) {
    Assert.assertEquals(g.anchor(1,1,thingsAdded.get(j)),false);
  }
  Assert.assertEquals(g.anchor(1,1,thingsAdded.get(99)),true);
  Assert.assertEquals(g.remove(1,1),true);
  List<Long> oneAdded=new LinkedList<>();
  firstKey=random.nextLong();
  g.create(1,1,firstKey);
  oneAdded.add(firstKey);
  for (int j=1; j < 100; ++j) {
    long key=random.nextLong();
    oneAdded.add(key);
    Assert.assertEquals(g.anchor(1,1,key),false);
  }
  g.rotate();
  Mockito.verify(looper).registerTimerEventInNanoSeconds(Mockito.eq(rotateIntervalNs),Mockito.any(Runnable.class));
  for (int j=0; j < 99; ++j) {
    Assert.assertEquals(g.anchor(1,1,oneAdded.get(j)),false);
  }
  Assert.assertEquals(g.anchor(1,1,oneAdded.get(99)),true);
  Assert.assertEquals(g.remove(1,1),true);
  List<Long> twoAdded=new LinkedList<>();
  firstKey=random.nextLong();
  g.create(2,1,firstKey);
  twoAdded.add(firstKey);
  for (int j=1; j < 100; ++j) {
    long key=random.nextLong();
    twoAdded.add(key);
    Assert.assertEquals(g.anchor(2,1,key),false);
  }
  for (int i=0; i < nBuckets; i++) {
    g.rotate();
  }
  Mockito.verify(looper,Mockito.times(nBuckets + 1)).registerTimerEventInNanoSeconds(Mockito.eq(rotateIntervalNs),Mockito.any(Runnable.class));
  for (int j=0; j < 100; ++j) {
    Assert.assertEquals(g.anchor(2,1,twoAdded.get(j)),false);
  }
  Assert.assertEquals(g.remove(2,1),false);
}
