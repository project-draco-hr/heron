{
  initFields();
  int mutable_bitField0_=0;
  com.google.protobuf.UnknownFieldSet.Builder unknownFields=com.google.protobuf.UnknownFieldSet.newBuilder();
  try {
    boolean done=false;
    while (!done) {
      int tag=input.readTag();
switch (tag) {
case 0:
        done=true;
      break;
default :
{
      if (!parseUnknownField(input,unknownFields,extensionRegistry,tag)) {
        done=true;
      }
      break;
    }
case 10:
{
    com.twitter.heron.api.generated.TopologyAPI.StreamId.Builder subBuilder=null;
    if (((bitField0_ & 0x00000001) == 0x00000001)) {
      subBuilder=stream_.toBuilder();
    }
    stream_=input.readMessage(com.twitter.heron.api.generated.TopologyAPI.StreamId.PARSER,extensionRegistry);
    if (subBuilder != null) {
      subBuilder.mergeFrom(stream_);
      stream_=subBuilder.buildPartial();
    }
    bitField0_|=0x00000001;
    break;
  }
case 16:
{
  int rawValue=input.readEnum();
  com.twitter.heron.api.generated.TopologyAPI.Grouping value=com.twitter.heron.api.generated.TopologyAPI.Grouping.valueOf(rawValue);
  if (value == null) {
    unknownFields.mergeVarintField(2,rawValue);
  }
 else {
    bitField0_|=0x00000002;
    gtype_=value;
  }
  break;
}
case 26:
{
com.twitter.heron.api.generated.TopologyAPI.StreamSchema.Builder subBuilder=null;
if (((bitField0_ & 0x00000004) == 0x00000004)) {
  subBuilder=groupingFields_.toBuilder();
}
groupingFields_=input.readMessage(com.twitter.heron.api.generated.TopologyAPI.StreamSchema.PARSER,extensionRegistry);
if (subBuilder != null) {
  subBuilder.mergeFrom(groupingFields_);
  groupingFields_=subBuilder.buildPartial();
}
bitField0_|=0x00000004;
break;
}
case 34:
{
bitField0_|=0x00000008;
customGroupingJavaObject_=input.readBytes();
break;
}
}
}
}
 catch (com.google.protobuf.InvalidProtocolBufferException e) {
throw e.setUnfinishedMessage(this);
}
catch (java.io.IOException e) {
throw new com.google.protobuf.InvalidProtocolBufferException(e.getMessage()).setUnfinishedMessage(this);
}
 finally {
this.unknownFields=unknownFields.build();
makeExtensionsImmutable();
}
}
