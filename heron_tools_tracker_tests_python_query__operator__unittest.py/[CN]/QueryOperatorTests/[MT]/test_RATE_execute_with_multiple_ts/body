@tornado.testing.gen_test
def test_RATE_execute_with_multiple_ts(self):
    ts = Mock()
    operator = Rate([ts])
    tmaster = Mock()
    tracker = Mock()
    start = 100
    end = 300

    @tornado.gen.coroutine
    def ts_side_effect3(*args):
        self.assertEqual((tracker, tmaster, 40, 300), args)
        raise tornado.gen.Return([Metrics('component', 'metricName', 'instance', (start - 60), end, {60: 0.0, 120: 1.0, 180: 1.0, 240: 1.0, 300: 1.0, }), Metrics('component', 'metricName', 'instance2', (start - 60), end, {60: 0.0, 120: 2.0, 180: 2.0, 240: 2.0, 300: 2.0, }), Metrics('component', 'metricName', 'instance3', (start - 60), end, {60: 0.0, 120: 3.0, 180: 3.0, 240: 3.0, 300: 3.0, }), Metrics('component', 'metricName', 'instance4', (start - 60), end, {60: 0.0, 120: 4.0, 180: 4.0, 240: 4.0, 300: 4.0, }), Metrics('component', 'metricName', 'instance5', (start - 60), end, {60: 0.0, 120: 5.0, 180: 5.0, 240: 5.0, 300: 5.0, })])
    ts.execute.side_effect = ts_side_effect3
    metrics = yield operator.execute(tracker, tmaster, start, end)
    self.assertEqual(5, len(metrics))
    for metric in metrics:
        if (metric.instance == 'instance'):
            self.assertDictEqual({120: 1, 180: 0, 240: 0, 300: 0, }, metric.timeline)
        elif (metric.instance == 'instance2'):
            self.assertDictEqual({120: 2, 180: 0, 240: 0, 300: 0, }, metric.timeline)
        elif (metric.instance == 'instance3'):
            self.assertDictEqual({120: 3, 180: 0, 240: 0, 300: 0, }, metric.timeline)
        elif (metric.instance == 'instance4'):
            self.assertDictEqual({120: 4, 180: 0, 240: 0, 300: 0, }, metric.timeline)
        elif (metric.instance == 'instance5'):
            self.assertDictEqual({120: 5, 180: 0, 240: 0, 300: 0, }, metric.timeline)
