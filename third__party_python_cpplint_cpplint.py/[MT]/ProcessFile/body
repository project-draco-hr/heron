def ProcessFile(filename, vlevel, extra_check_functions=[]):
    'Does google-lint on a single file.\n\n  Args:\n    filename: The name of the file to parse.\n\n    vlevel: The level of errors to report.  Every error of confidence\n    >= verbose_level will be reported.  0 is a good default.\n\n    extra_check_functions: An array of additional check functions that will be\n                           run on each source line. Each function takes 4\n                           arguments: filename, clean_lines, line, error\n  '
    _SetVerboseLevel(vlevel)
    _BackupFilters()
    if (not ProcessConfigOverrides(filename)):
        _RestoreFilters()
        return
    lf_lines = []
    crlf_lines = []
    try:
        if (filename == '-'):
            lines = codecs.StreamReaderWriter(sys.stdin, codecs.getreader('utf8'), codecs.getwriter('utf8'), 'replace').read().split('\n')
        else:
            lines = codecs.open(filename, 'r', 'utf8', 'replace').read().split('\n')
        for linenum in range((len(lines) - 1)):
            if lines[linenum].endswith('\r'):
                lines[linenum] = lines[linenum].rstrip('\r')
                crlf_lines.append((linenum + 1))
            else:
                lf_lines.append((linenum + 1))
    except IOError:
        sys.stderr.write(("Skipping input '%s': Can't open for reading\n" % filename))
        _RestoreFilters()
        return
    file_extension = filename[(filename.rfind('.') + 1):]
    if ((filename != '-') and (file_extension not in _valid_extensions)):
        sys.stderr.write(('Ignoring %s; not a valid file name (%s)\n' % (filename, ', '.join(_valid_extensions))))
    else:
        ProcessFileData(filename, file_extension, lines, Error, extra_check_functions)
        if (lf_lines and crlf_lines):
            for linenum in crlf_lines:
                Error(filename, linenum, 'whitespace/newline', 1, 'Unexpected \\r (^M) found; better to use only \\n')
    _RestoreFilters()
