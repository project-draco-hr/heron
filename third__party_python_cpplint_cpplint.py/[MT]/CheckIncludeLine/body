def CheckIncludeLine(filename, clean_lines, linenum, include_state, error):
    'Check rules that are applicable to #include lines.\n\n  Strings on #include lines are NOT removed from elided line, to make\n  certain tasks easier. However, to prevent false positives, checks\n  applicable to #include lines in CheckLanguage must be put here.\n\n  Args:\n    filename: The name of the current file.\n    clean_lines: A CleansedLines instance containing the file.\n    linenum: The number of the line to check.\n    include_state: An _IncludeState instance in which the headers are inserted.\n    error: The function to call with any errors found.\n  '
    fileinfo = FileInfo(filename)
    line = clean_lines.lines[linenum]
    match = Match('#include\\s*"([^/]+\\.h)"', line)
    if (match and (not _THIRD_PARTY_HEADERS_PATTERN.match(match.group(1)))):
        error(filename, linenum, 'build/include', 4, 'Include the directory when naming .h files')
    match = _RE_PATTERN_INCLUDE.search(line)
    if match:
        include = match.group(2)
        is_system = (match.group(1) == '<')
        duplicate_line = include_state.FindHeader(include)
        if (duplicate_line >= 0):
            error(filename, linenum, 'build/include', 4, ('"%s" already included at %s:%s' % (include, filename, duplicate_line)))
        elif (include.endswith('.cc') and (os.path.dirname(fileinfo.RepositoryName()) != os.path.dirname(include))):
            error(filename, linenum, 'build/include', 4, 'Do not include .cc files from other packages')
        elif (not _THIRD_PARTY_HEADERS_PATTERN.match(include)):
            include_state.include_list[(-1)].append((include, linenum))
            error_message = include_state.CheckNextIncludeOrder(_ClassifyInclude(fileinfo, include, is_system))
            if error_message:
                error(filename, linenum, 'build/include_order', 4, ('%s. Should be: %s.h, c system, c++ system, other.' % (error_message, fileinfo.BaseName())))
            canonical_include = include_state.CanonicalizeAlphabeticalOrder(include)
            if (not include_state.IsInAlphabeticalOrder(clean_lines, linenum, canonical_include)):
                error(filename, linenum, 'build/include_alpha', 4, ('Include "%s" not in alphabetical order' % include))
            include_state.SetLastHeader(canonical_include)
