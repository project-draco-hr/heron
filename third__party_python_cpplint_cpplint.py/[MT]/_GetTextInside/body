def _GetTextInside(text, start_pattern):
    "Retrieves all the text between matching open and close parentheses.\n\n  Given a string of lines and a regular expression string, retrieve all the text\n  following the expression and between opening punctuation symbols like\n  (, [, or {, and the matching close-punctuation symbol. This properly nested\n  occurrences of the punctuations, so for the text like\n    printf(a(), b(c()));\n  a call to _GetTextInside(text, r'printf\\(') will return 'a(), b(c())'.\n  start_pattern must match string having an open punctuation symbol at the end.\n\n  Args:\n    text: The lines to extract text. Its comments and strings must be elided.\n           It can be single line and can span multiple lines.\n    start_pattern: The regexp string indicating where to start extracting\n                   the text.\n  Returns:\n    The extracted text.\n    None if either the opening string or ending punctuation could not be found.\n  "
    matching_punctuation = {'(': ')', '{': '}', '[': ']', }
    closing_punctuation = set(matching_punctuation.itervalues())
    match = re.search(start_pattern, text, re.M)
    if (not match):
        return None
    start_position = match.end(0)
    assert (start_position > 0), 'start_pattern must ends with an opening punctuation.'
    assert (text[(start_position - 1)] in matching_punctuation), 'start_pattern must ends with an opening punctuation.'
    punctuation_stack = [matching_punctuation[text[(start_position - 1)]]]
    position = start_position
    while (punctuation_stack and (position < len(text))):
        if (text[position] == punctuation_stack[(-1)]):
            punctuation_stack.pop()
        elif (text[position] in closing_punctuation):
            return None
        elif (text[position] in matching_punctuation):
            punctuation_stack.append(matching_punctuation[text[position]])
        position += 1
    if punctuation_stack:
        return None
    return text[start_position:(position - 1)]
