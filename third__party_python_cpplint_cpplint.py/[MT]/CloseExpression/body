def CloseExpression(clean_lines, linenum, pos):
    "If input points to ( or { or [ or <, finds the position that closes it.\n\n  If lines[linenum][pos] points to a '(' or '{' or '[' or '<', finds the\n  linenum/pos that correspond to the closing of the expression.\n\n  TODO(unknown): cpplint spends a fair bit of time matching parentheses.\n  Ideally we would want to index all opening and closing parentheses once\n  and have CloseExpression be just a simple lookup, but due to preprocessor\n  tricks, this is not so easy.\n\n  Args:\n    clean_lines: A CleansedLines instance containing the file.\n    linenum: The number of the line to check.\n    pos: A position on the line.\n\n  Returns:\n    A tuple (line, linenum, pos) pointer *past* the closing brace, or\n    (line, len(lines), -1) if we never find a close.  Note we ignore\n    strings and comments when matching; and the line we return is the\n    'cleansed' line at linenum.\n  "
    line = clean_lines.elided[linenum]
    if ((line[pos] not in '({[<') or Match('<[<=]', line[pos:])):
        return (line, clean_lines.NumLines(), (-1))
    (end_pos, stack) = FindEndOfExpressionInLine(line, pos, [])
    if (end_pos > (-1)):
        return (line, linenum, end_pos)
    while (stack and (linenum < (clean_lines.NumLines() - 1))):
        linenum += 1
        line = clean_lines.elided[linenum]
        (end_pos, stack) = FindEndOfExpressionInLine(line, 0, stack)
        if (end_pos > (-1)):
            return (line, linenum, end_pos)
    return (line, clean_lines.NumLines(), (-1))
