def run(command, parser, cl_args, unknown_args):
    try:
        topology_name = cl_args['topology-name']
        config_overrides = utils.parse_cmdline_override(cl_args)
        new_args = ['--cluster', cl_args['cluster'], '--role', cl_args['role'], '--environment', cl_args['environ'], '--heron_home', utils.get_heron_dir(), '--config_path', cl_args['config_path'], '--config_overrides', base64.b64encode(config_overrides), '--topology_name', topology_name, '--command', command]
        lib_jars = utils.get_heron_libs((jars.scheduler_jars() + jars.statemgr_jars()))
        execute.heron_class('com.twitter.heron.scheduler.RuntimeManagerMain', lib_jars, extra_jars=[], args=new_args)
    except Exception as ex:
        print ('Error: %s' % str(ex))
        Log.error(("Failed to deactivate topology '%s'" % topology_name))
        return False
    Log.info(("Successfully deactivated topology '%s'" % topology_name))
    return True
