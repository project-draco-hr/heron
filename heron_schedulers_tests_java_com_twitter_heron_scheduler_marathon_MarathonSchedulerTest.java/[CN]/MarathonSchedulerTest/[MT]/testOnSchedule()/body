{
  MarathonController controller=Mockito.mock(MarathonController.class);
  Mockito.doReturn(controller).when(scheduler).getController();
  Mockito.doReturn(TOPOLOGY_CONF).when(scheduler).getTopologyConf(Mockito.any(PackingPlan.class));
  scheduler.initialize(Mockito.mock(Config.class),Mockito.mock(Config.class));
  Assert.assertFalse(scheduler.onSchedule(null));
  PackingPlan pplan=new PackingPlan(PACKING_PLAN_ID,new HashMap<String,PackingPlan.ContainerPlan>(),Mockito.mock(Resource.class));
  Assert.assertTrue(pplan.containers.isEmpty());
  Assert.assertFalse(scheduler.onSchedule(pplan));
  Map<String,PackingPlan.ContainerPlan> containers=new HashMap<>();
  containers.put(CONTAINER_ID,Mockito.mock(PackingPlan.ContainerPlan.class));
  PackingPlan validPlan=new PackingPlan(PACKING_PLAN_ID,containers,Mockito.mock(Resource.class));
  Mockito.doReturn(false).when(controller).submitTopology(Mockito.anyString());
  Assert.assertFalse(scheduler.onSchedule(validPlan));
  Mockito.verify(controller).submitTopology(Matchers.anyString());
  Mockito.doReturn(true).when(controller).submitTopology(Mockito.anyString());
  Assert.assertTrue(scheduler.onSchedule(validPlan));
  Mockito.verify(controller,Mockito.times(2)).submitTopology(Matchers.anyString());
}
