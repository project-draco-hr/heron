{
  LOG.info("Launching topology for local cluster " + LocalContext.cluster(config));
  TopologyAPI.Topology topology=Runtime.topology(runtime);
  String sandboxHome=Defaults.sandboxHome();
  String sandboxConf=Defaults.sandboxConf();
  Config sandboxConfig=Config.expand(Config.newBuilder().putAll(ClusterDefaults.getDefaults()).putAll(ClusterConfig.loadBasicConfig(sandboxHome,sandboxConf)).build());
  LOG.info("loaded sandbox config " + sandboxConfig);
  if (!downloadAndExtractPackages()) {
    LOG.severe("Failed to download the core and topology packages");
    return false;
  }
  String configInBase64=DatatypeConverter.printBase64Binary(sandboxConfig.asString().getBytes(Charset.forName("UTF-8")));
  System.out.println(configInBase64);
  String schedulerClassPath=new StringBuilder().append(LocalContext.schedulerClassPath(sandboxConfig)).append(":").append(LocalContext.packingClassPath(sandboxConfig)).append(":").append(LocalContext.stateManagerClassPath(sandboxConfig)).toString();
  String schedulerCmd=String.format("%s %s %s %s %s %s %s %s %s %d","java","-cp",schedulerClassPath,"com.twitter.heron.scheduler.SchedulerMain",LocalContext.cluster(config),LocalContext.role(config),LocalContext.environ(config),topology.getName(),LocalContext.topologyJarFile(config),NetworkUtils.getFreePort());
  LOG.info("Scheduler command line: " + schedulerCmd.toString());
  Process p=ShellUtils.runASyncProcess(true,schedulerCmd.toString(),new File(topologyWorkingDirectory));
  if (p == null) {
    LOG.severe("Failed to start SchedulerMain using: " + schedulerCmd);
    return false;
  }
  LOG.info(String.format("For checking the status and logs of the topology, use the working directory %s",LocalContext.workingDirectory(config)));
  return true;
}
