{
  LOG.info("Launching topology for local cluster " + LocalContext.cluster(config));
  TopologyAPI.Topology topology=Runtime.topology(runtime);
  String sandboxHome=Defaults.sandboxHome();
  String sandboxConf=Defaults.sandboxConf();
  Config sandboxConfig=Config.expand(Config.newBuilder().putAll(ClusterDefaults.getDefaults()).putAll(ClusterConfig.loadBasicConfig(sandboxHome,sandboxConf)).build());
  LOG.info("loaded sandbox config " + sandboxConfig);
  if (!downloadAndExtractPackages()) {
    LOG.severe("Failed to download the core and topology packages");
    return false;
  }
  String configInBase64=DatatypeConverter.printBase64Binary(sandboxConfig.asString().getBytes(Charset.forName("UTF-8")));
  System.out.println(configInBase64);
  String schedulerClassPath=new StringBuilder().append(LocalContext.schedulerClassPath(sandboxConfig)).append(":").append(LocalContext.packingClassPath(sandboxConfig)).append(":").append(LocalContext.stateManagerClassPath(sandboxConfig)).toString();
  String executorCmd=String.format("%s %d %s %s %s %s %s %s %s %s %s %s %s %s %s %s %s %s %s %s %s %s %d %s %s %d %s %s %s %s %s %s %d",LocalContext.executorBinary(sandboxConfig),0,topology.getName(),topology.getId(),FilenameUtils.getName(LocalContext.topologyDefinitionFile(config)),TopologyUtils.packingToString(packing),LocalContext.stateManagerConnectionString(config),LocalContext.stateManagerRootPath(config),LocalContext.tmasterBinary(sandboxConfig),LocalContext.stmgrBinary(sandboxConfig),LocalContext.metricsManagerClassPath(sandboxConfig),formatJavaOpts(TopologyUtils.getInstanceJvmOptions(topology)),TopologyUtils.makeClassPath(topology,LocalContext.topologyJarFile(config)),NetworkUtils.getFreePort(),NetworkUtils.getFreePort(),NetworkUtils.getFreePort(),LocalContext.systemConfigFile(sandboxConfig),TopologyUtils.formatRamMap(TopologyUtils.getComponentRamMap(topology)),formatJavaOpts(TopologyUtils.getComponentJvmOptions(topology)),LocalContext.topologyPackageType(config),LocalContext.topologyJarFile(config),LocalContext.javaHome(config),NetworkUtils.getFreePort(),LocalContext.logDirectory(sandboxConfig),LocalContext.shellBinary(sandboxConfig),NetworkUtils.getFreePort(),LocalContext.cluster(config),LocalContext.role(config),LocalContext.environ(config),LocalContext.instanceClassPath(sandboxConfig),LocalContext.metricsSinksFile(sandboxConfig),schedulerClassPath,NetworkUtils.getFreePort());
  LOG.info("Executor command line: " + executorCmd.toString());
  return 0 == ShellUtils.runSyncProcess(true,true,executorCmd.toString(),new StringBuilder(),new StringBuilder(),new File(topologyWorkingDirectory));
}
