{
  SchedulerStateManagerAdaptor stateManager=Runtime.schedulerStateManagerAdaptor(runtime);
  LOG.log(Level.FINE,"State manager used: {0} ",stateManager.getClass().getName());
  File workingDirectory=new File(topologyWorkingDirectory);
  if (!workingDirectory.exists()) {
    LOG.fine("The working directory does not exist; creating it.");
    if (!workingDirectory.mkdirs()) {
      LOG.severe("Failed to create directory: " + workingDirectory.getPath());
      return false;
    }
  }
  LOG.log(Level.FINE,"Fetching heron core release {0}",coreReleasePackage);
  LOG.fine("If release package is already in the working directory");
  LOG.fine("the old one will be overwritten");
  if (!curlPackage(coreReleasePackage,targetCoreReleaseFile)) {
    LOG.severe("Failed to fetch the heron core release package.");
    return false;
  }
  LOG.log(Level.FINE,"Untar the heron core release {0}",coreReleasePackage);
  if (!untarPackage(targetCoreReleaseFile,topologyWorkingDirectory)) {
    LOG.severe("Failed to untar heron core release package.");
    return false;
  }
  if (!FileUtils.deleteQuietly(new File(targetCoreReleaseFile))) {
    LOG.warning("Unable to delete the core release file: " + targetCoreReleaseFile);
  }
  String topologyPackage=Runtime.topologyPackageUri(runtime).toString();
  LOG.log(Level.FINE,"Fetching topology package {0}",Runtime.topologyPackageUri(runtime));
  LOG.fine("If topology package is already in the working directory");
  LOG.fine("the old one will be overwritten");
  if (!curlPackage(topologyPackage,targetTopologyPackageFile)) {
    LOG.severe("Failed to fetch the heron core release package.");
    return false;
  }
  LOG.log(Level.FINE,"Untar the topology package: {0}",topologyPackage);
  if (!untarPackage(targetTopologyPackageFile,topologyWorkingDirectory)) {
    LOG.severe("Failed to untar topology package.");
    return false;
  }
  if (!FileUtils.deleteQuietly(new File(targetTopologyPackageFile))) {
    LOG.warning("Unable to delete the core release file: " + targetTopologyPackageFile);
  }
  return true;
}
