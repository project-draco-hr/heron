{
  SchedulerStateManagerAdaptor stateManager=Runtime.schedulerStateManagerAdaptor(runtime);
  LOG.info("State manager used: " + stateManager.getClass().getName());
  File workingDirectory=new File(topologyWorkingDirectory);
  if (!workingDirectory.exists()) {
    LOG.info("The working directory does not exist; creating it.");
    if (!workingDirectory.mkdirs()) {
      LOG.severe("Failed to create directory: " + workingDirectory.getPath());
      return false;
    }
  }
  LOG.info("Fetching heron core release " + coreReleasePackage);
  LOG.info("If release package is already in the working directory");
  LOG.info("the old one will be overwritten");
  if (!copyPackage(coreReleasePackage,targetCoreReleaseFile)) {
    LOG.severe("Failed to fetch the heron core release package.");
    return false;
  }
  LOG.info("Untar the heron core release " + coreReleasePackage);
  if (!untarPackage(targetCoreReleaseFile,topologyWorkingDirectory)) {
    LOG.severe("Failed to untar heron core release package.");
    return false;
  }
  if (!FileUtils.deleteQuietly(new File(targetCoreReleaseFile))) {
    LOG.warning("Unable to delete the core release file: " + targetCoreReleaseFile);
  }
  String topologyPackage=Runtime.topologyPackageUri(runtime).toString();
  LOG.info("Fetching topology package " + topologyPackage);
  LOG.info("If topology package is already in the working directory");
  LOG.info("the old one will be overwritten");
  if (!copyPackage(topologyPackage,targetTopologyPackageFile)) {
    LOG.severe("Failed to fetch the heron core release package.");
    return false;
  }
  LOG.info("Untar the topology package: " + topologyPackage);
  if (!untarPackage(targetTopologyPackageFile,topologyWorkingDirectory)) {
    LOG.severe("Failed to untar topology package.");
    return false;
  }
  if (!FileUtils.deleteQuietly(new File(targetTopologyPackageFile))) {
    LOG.warning("Unable to delete the core release file: " + targetTopologyPackageFile);
  }
  return true;
}
