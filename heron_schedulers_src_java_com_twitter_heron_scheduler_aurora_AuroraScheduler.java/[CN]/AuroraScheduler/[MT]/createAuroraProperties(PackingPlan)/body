{
  Map<String,String> auroraProperties=new HashMap<>();
  TopologyAPI.Topology topology=Runtime.topology(runtime);
  Resource containerResource=SchedulerUtils.getMaxRequiredResource(packing);
  auroraProperties.put("SANDBOX_EXECUTOR_BINARY",Context.executorSandboxBinary(config));
  auroraProperties.put("TOPOLOGY_NAME",topology.getName());
  auroraProperties.put("TOPOLOGY_ID",topology.getId());
  auroraProperties.put("TOPOLOGY_DEFINITION_FILE",FileUtils.getBaseName(Context.topologyDefinitionFile(config)));
  auroraProperties.put("STATEMGR_CONNECTION_STRING",Context.stateManagerConnectionString(config));
  auroraProperties.put("STATEMGR_ROOT_PATH",Context.stateManagerRootPath(config));
  auroraProperties.put("SANDBOX_TMASTER_BINARY",Context.tmasterSandboxBinary(config));
  auroraProperties.put("SANDBOX_STMGR_BINARY",Context.stmgrSandboxBinary(config));
  auroraProperties.put("SANDBOX_METRICSMGR_CLASSPATH",Context.metricsManagerSandboxClassPath(config));
  auroraProperties.put("INSTANCE_JVM_OPTS_IN_BASE64",formatJavaOpts(TopologyUtils.getInstanceJvmOptions(topology)));
  auroraProperties.put("TOPOLOGY_CLASSPATH",TopologyUtils.makeClassPath(topology,Context.topologyBinaryFile(config)));
  auroraProperties.put("SANDBOX_SYSTEM_YAML",Context.systemConfigSandboxFile(config));
  auroraProperties.put("COMPONENT_RAMMAP",Runtime.componentRamMap(runtime));
  auroraProperties.put("COMPONENT_JVM_OPTS_IN_BASE64",formatJavaOpts(TopologyUtils.getComponentJvmOptions(topology)));
  auroraProperties.put("TOPOLOGY_PACKAGE_TYPE",Context.topologyPackageType(config));
  auroraProperties.put("TOPOLOGY_BINARY_FILE",FileUtils.getBaseName(Context.topologyBinaryFile(config)));
  auroraProperties.put("HERON_SANDBOX_JAVA_HOME",Context.javaSandboxHome(config));
  auroraProperties.put("SANDBOX_SHELL_BINARY",Context.shellSandboxBinary(config));
  auroraProperties.put("SANDBOX_PYTHON_INSTANCE_BINARY",Context.pythonInstanceSandboxBinary(config));
  auroraProperties.put("CPUS_PER_CONTAINER",Double.toString(containerResource.getCpu()));
  auroraProperties.put("DISK_PER_CONTAINER",Long.toString(containerResource.getDisk()));
  auroraProperties.put("RAM_PER_CONTAINER",Long.toString(containerResource.getRam()));
  auroraProperties.put("NUM_CONTAINERS",(1 + TopologyUtils.getNumContainers(topology)) + "");
  auroraProperties.put("CLUSTER",Context.cluster(config));
  auroraProperties.put("ENVIRON",Context.environ(config));
  auroraProperties.put("ROLE",Context.role(config));
  auroraProperties.put("ISPRODUCTION",isProduction() + "");
  auroraProperties.put("SANDBOX_INSTANCE_CLASSPATH",Context.instanceSandboxClassPath(config));
  auroraProperties.put("SANDBOX_METRICS_YAML",Context.metricsSinksSandboxFile(config));
  String completeSchedulerClassPath=new StringBuilder().append(Context.schedulerSandboxClassPath(config)).append(":").append(Context.packingSandboxClassPath(config)).append(":").append(Context.stateManagerSandboxClassPath(config)).toString();
  auroraProperties.put("SANDBOX_SCHEDULER_CLASSPATH",completeSchedulerClassPath);
  String heronCoreReleasePkgURI=Context.corePackageUri(config);
  String topologyPkgURI=Runtime.topologyPackageUri(runtime).toString();
  auroraProperties.put("CORE_PACKAGE_URI",heronCoreReleasePkgURI);
  auroraProperties.put("TOPOLOGY_PACKAGE_URI",topologyPkgURI);
  return auroraProperties;
}
