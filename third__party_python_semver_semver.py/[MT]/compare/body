def compare(ver1, ver2):

    def nat_cmp(a, b):
        (a, b) = ((a or ''), (b or ''))
        convert = (lambda text: ((2, int(text)) if re.match('[0-9]+', text) else (1, text)))
        split_key = (lambda key: [convert(c) for c in key.split('.')])
        return cmp(split_key(a), split_key(b))

    def compare_by_keys(d1, d2):
        for key in ['major', 'minor', 'patch']:
            v = cmp(d1.get(key), d2.get(key))
            if v:
                return v
        (rc1, rc2) = (d1.get('prerelease'), d2.get('prerelease'))
        rccmp = nat_cmp(rc1, rc2)
        (build_1, build_2) = (d1.get('build'), d2.get('build'))
        build_cmp = nat_cmp(build_1, build_2)
        if ((not rccmp) and (not build_cmp)):
            return 0
        if ((not rc1) and (not build_1)):
            return 1
        elif ((not rc2) and (not build_2)):
            return (-1)
        return (rccmp or build_cmp)
    (v1, v2) = (parse(ver1), parse(ver2))
    return compare_by_keys(v1, v2)
