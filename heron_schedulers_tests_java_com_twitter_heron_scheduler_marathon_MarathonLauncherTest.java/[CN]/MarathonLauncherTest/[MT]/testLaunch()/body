{
  Config config=Config.newBuilder().build();
  MarathonLauncher launcher=Mockito.spy(MarathonLauncher.class);
  launcher.initialize(config,config);
  LauncherUtils mockLauncherUtils=Mockito.mock(LauncherUtils.class);
  PowerMockito.spy(LauncherUtils.class);
  PowerMockito.doReturn(mockLauncherUtils).when(LauncherUtils.class,"getInstance");
  Mockito.when(mockLauncherUtils.onScheduleAsLibrary(Mockito.any(Config.class),Mockito.any(Config.class),Mockito.any(IScheduler.class),Mockito.any(PackingPlan.class))).thenReturn(true);
  Assert.assertTrue(launcher.launch(Mockito.mock(PackingPlan.class)));
  Mockito.verify(mockLauncherUtils).onScheduleAsLibrary(Mockito.any(Config.class),Mockito.any(Config.class),Mockito.any(IScheduler.class),Mockito.any(PackingPlan.class));
  Mockito.when(mockLauncherUtils.onScheduleAsLibrary(Mockito.any(Config.class),Mockito.any(Config.class),Mockito.any(IScheduler.class),Mockito.any(PackingPlan.class))).thenReturn(false);
  Assert.assertFalse(launcher.launch(Mockito.mock(PackingPlan.class)));
  Mockito.verify(mockLauncherUtils,Mockito.times(2)).onScheduleAsLibrary(Mockito.any(Config.class),Mockito.any(Config.class),Mockito.any(IScheduler.class),Mockito.any(PackingPlan.class));
  launcher.close();
}
