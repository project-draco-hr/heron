def submit_fatjar(command, parser, cl_args, unknown_args):
    try:
        cluster_role_env = cl_args['cluster/[role]/[env]']
        topology_file = cl_args['topology-file-name']
        topology_class_name = cl_args['topology-class-name']
        topology_args = tuple(unknown_args)
        config_path = cl_args['config_path']
    except KeyError:
        subparser = utils.get_subparser(parser, command)
        print subparser.format_help()
        parser.exit()
    tmp_dir = tempfile.mkdtemp()
    if cl_args['deploy_deactivated']:
        initial_state = topology_pb2.TopologyState.Name(topology_pb2.PAUSED)
    else:
        initial_state = topology_pb2.TopologyState.Name(topology_pb2.RUNNING)
    opts.set_config('cmdline.topologydefn.tmpdirectory', tmp_dir)
    opts.set_config('cmdline.topology.initial.state', initial_state)
    execute.heron_class(topology_class_name, utils.get_heron_libs(jars.topology_jars()), extra_jars=[topology_file], args=topology_args)
    try:
        cluster_role_env = args.parse_cluster_role_env(cluster_role_env)
        config_overrides = args.parse_cmdline_override(cl_args)
        launch_topologies(cluster_role_env, topology_file, tmp_dir, config_path, config_overrides)
    finally:
        shutil.rmtree(tmp_dir)
