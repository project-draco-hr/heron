{
  CommandLineParser parser=new DefaultParser();
  Options options=new Options();
  options.addOption(Option.builder("f").required(true).hasArg().longOpt("extra_action_file").desc("bazel extra action protobuf file").build());
  options.addOption(Option.builder("c").required(true).hasArg().longOpt("cpplint_file").desc("Executable cpplint file to invoke").build());
  try {
    CommandLine line=parser.parse(options,args);
    String extraActionFile=line.getOptionValue("f");
    String cpplintFile=line.getOptionValue("c");
    Collection<String> sourceFiles=getSourceFiles(extraActionFile);
    if (sourceFiles.size() == 0) {
      LOG.fine("No cpp files found by checkstyle");
      return;
    }
    LOG.fine(sourceFiles.size() + " cpp files found by checkstyle");
    List<String> commandBuilder=new ArrayList<>();
    commandBuilder.add(cpplintFile);
    commandBuilder.add("--linelength=100");
    commandBuilder.add("--filter=-build/header_guard,-runtime/references,-runtime/threadsafe_fn");
    commandBuilder.addAll(sourceFiles);
    runLinter(commandBuilder);
  }
 catch (  ParseException exp) {
    LOG.severe(String.format("Invalid input to %s: %s",CLASSNAME,exp.getMessage()));
    HelpFormatter formatter=new HelpFormatter();
    formatter.printHelp("java " + CLASSNAME,options);
  }
}
