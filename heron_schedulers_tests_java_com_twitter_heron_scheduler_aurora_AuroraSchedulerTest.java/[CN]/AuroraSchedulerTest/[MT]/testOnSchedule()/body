{
  AuroraController controller=Mockito.mock(AuroraController.class);
  Mockito.doReturn(controller).when(scheduler).getController();
  scheduler.initialize(Mockito.mock(Config.class),Mockito.mock(Config.class));
  Assert.assertFalse(scheduler.onSchedule(null));
  PackingPlan plan=new PackingPlan(PACKING_PLAN_ID,new HashSet<PackingPlan.ContainerPlan>());
  Assert.assertTrue(plan.getContainers().isEmpty());
  Assert.assertFalse(scheduler.onSchedule(plan));
  Set<PackingPlan.ContainerPlan> containers=new HashSet<>();
  containers.add(Mockito.mock(PackingPlan.ContainerPlan.class));
  PackingPlan validPlan=new PackingPlan(PACKING_PLAN_ID,containers);
  Mockito.doReturn(false).when(controller).createJob(Mockito.anyString(),Matchers.anyMapOf(String.class,String.class));
  Assert.assertFalse(scheduler.onSchedule(validPlan));
  Mockito.verify(controller).createJob(Mockito.eq(AURORA_PATH),Matchers.anyMapOf(String.class,String.class));
  Mockito.doReturn(true).when(controller).createJob(Mockito.anyString(),Matchers.anyMapOf(String.class,String.class));
  Assert.assertTrue(scheduler.onSchedule(validPlan));
  Mockito.verify(controller,Mockito.times(2)).createJob(Mockito.eq(AURORA_PATH),Matchers.anyMapOf(String.class,String.class));
}
