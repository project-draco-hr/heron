{
  this.topologyName=topologyName;
  this.metricsmgrId=metricsmgrId;
  this.config=config;
  this.metricsManagerServerLoop=new NIOLooper();
  this.metricsManagerPublisher=Metrics.MetricPublisher.newBuilder().setHostname(getLocalHostName()).setPort(serverPort).setComponentName(METRICS_MANAGER_COMPONENT_NAME).setInstanceId(metricsmgrId).setInstanceIndex(METRICS_MANAGER_INSTANCE_ID).build();
  this.jvmMetrics=new JVMMetrics();
  this.metricsQueue=new Communicator<Metrics.MetricPublisherPublishMessage>(null,this.metricsManagerServerLoop);
  this.metricsCollector=new MetricsCollector(metricsManagerServerLoop,metricsQueue);
  this.heronMetricsExportIntervalSec=systemConfig.getHeronMetricsExportIntervalSec();
  setupInternalMetricsExport();
  setupJVMMetrics(systemConfig.getInstanceMetricsSystemSampleIntervalSec());
  HeronSocketOptions serverSocketOptions=new HeronSocketOptions(systemConfig.getMetricsMgrNetworkWriteBatchSizeBytes(),systemConfig.getMetricsMgrNetworkWriteBatchTimeMs(),systemConfig.getMetricsMgrNetworkReadBatchSizeBytes(),systemConfig.getMetricsMgrNetworkReadBatchTimeMs(),systemConfig.getMetricsMgrNetworkOptionsSocketSendBufferSizeBytes(),systemConfig.getMetricsMgrNetworkOptionsSocketReceivedBufferSizeBytes());
  MultiCountMetric serverCounters=new MultiCountMetric();
  metricsCollector.registerMetric(METRICS_MANAGER_COMPONENT_NAME,serverCounters,heronMetricsExportIntervalSec);
  metricsManagerServer=new MetricsManagerServer(metricsManagerServerLoop,serverHost,serverPort,serverSocketOptions,serverCounters);
  executors=Executors.newFixedThreadPool(config.getNumberOfSinks());
  sinkExecutors=new ConcurrentHashMap<>(config.getNumberOfSinks());
  sinksRetryAttempts=new ConcurrentHashMap<>(config.getNumberOfSinks());
  Thread.setDefaultUncaughtExceptionHandler(new DefaultExceptionHandler());
  for (  String sinkId : config.getSinkIds()) {
    SinkExecutor sinkExecutor=initSinkExecutor(sinkId);
    sinkExecutors.put(sinkId,sinkExecutor);
    Object restartAttempts=config.getConfigForSink(sinkId).get(MetricsSinksConfig.CONFIG_KEY_SINK_RESTART_ATTEMPTS);
    sinksRetryAttempts.put(sinkId,restartAttempts == null ? MetricsSinksConfig.DEFAULT_SINK_RESTART_ATTEMPTS : TypeUtils.getInteger(restartAttempts));
    metricsManagerServer.addSinkCommunicator(sinkExecutor.getCommunicator());
  }
}
