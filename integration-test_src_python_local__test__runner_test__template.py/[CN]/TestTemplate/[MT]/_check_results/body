def _check_results(self):
    ' get actual and expected result.\n    retry if results are not equal a predesignated amount of times\n    '
    expected_result = ''
    actual_result = ''
    retries_left = RETRY_COUNT
    while (retries_left > 0):
        retries_left -= 1
        try:
            with open(self.params['readFile'], 'r') as f:
                expected_result = f.read()
            with open(self.params['outputFile'], 'r') as g:
                actual_result = g.read()
        except Exception as e:
            logging.error('Failed to read expected or actual results from file for test %s: %s', self.testname, e)
            self.cleanup_test()
            return False
        if (expected_result == actual_result):
            break
        if (retries_left > 0):
            expected_result = ''
            actual_result = ''
            logging.info(('Failed to get expected results for test %s (attempt %s/%s), ' + 'retrying after %s seconds'), self.testname, (RETRY_COUNT - retries_left), RETRY_COUNT, RETRY_INTERVAL)
            time.sleep(RETRY_INTERVAL)
    self.cleanup_test()
    if (actual_result == expected_result):
        logging.info('Actual result matched expected result for test %s', self.testname)
        logging.info(('Actual result ---------- \n' + actual_result))
        logging.info(('Expected result ---------- \n' + expected_result))
        return True
    else:
        logging.error('Actual result did not match expected result for test %s', self.testname)
        logging.info(('Actual result ---------- \n' + actual_result))
        logging.info(('Expected result ---------- \n' + expected_result))
        return False
