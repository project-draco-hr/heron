def runTest(test, topologyName, params):
    ' Runs the test for one topology '
    try:
        submitTopology(params['cliPath'], params['cluster'], params['testJarPath'], params['topologyClassPath'], params['topologyName'], params['readFile'], params['outputFile'])
    except Exception as e:
        logging.error('Failed to submit %s topology: %s', topologyName, str(e))
        return False
    processList = getProcesses()
    while (not processExists(processList, HERON_STMGR_CMD)):
        processList = getProcesses()
    _safe_delete_file(params['readFile'])
    _safe_delete_file(params['outputFile'])
    try:
        with open('temp.txt', 'w') as f:
            for line in TEST_INPUT:
                f.write(line)
    except Exception as e:
        logging.error('Failed to write to temp.txt file')
        return False
    seconds = 30
    logging.info('Sleeping for %s seconds to allow time for startup', seconds)
    time.sleep(seconds)
    if (test == 'KILL_TMASTER'):
        restartShard(params['cliPath'], params['cluster'], params['topologyName'], TMASTER_SHARD)
    elif (test == 'KILL_STMGR'):
        logging.info('Executing kill stream manager')
        stmgrPid = getPid(('%s-%d' % (STMGR, NON_TMASTER_SHARD)), params['workingDirectory'])
        killProcess(stmgrPid)
    elif (test == 'KILL_METRICSMGR'):
        logging.info('Executing kill metrics manager')
        metricsmgrPid = getPid(('%s-%d' % (HERON_METRICSMGR, NON_TMASTER_SHARD)), params['workingDirectory'])
        killProcess(metricsmgrPid)
    elif (test == 'KILL_STMGR_METRICSMGR'):
        logging.info('Executing kill stream manager and metrics manager')
        stmgrPid = getPid(('%s-%d' % (STMGR, NON_TMASTER_SHARD)), params['workingDirectory'])
        killProcess(stmgrPid)
        metricsmgrPid = getPid(('%s-%d' % (HERON_METRICSMGR, NON_TMASTER_SHARD)), params['workingDirectory'])
        killProcess(metricsmgrPid)
    elif (test == 'KILL_BOLT'):
        logging.info('Executing kill bolt')
        boltPid = getPid(('container_%d_%s' % (NON_TMASTER_SHARD, HERON_BOLT)), params['workingDirectory'])
        killProcess(boltPid)
    processList = getProcesses()
    while (not processExists(processList, HERON_STMGR_CMD)):
        processList = getProcesses()
    os.rename('temp.txt', params['readFile'])
    seconds = 30
    logging.info('Sleeping for %s seconds before checking for results', seconds)
    time.sleep(seconds)

    def cleanup_test():
        try:
            killTopology(params['cliPath'], params['cluster'], params['topologyName'])
        except Exception as e:
            logging.error('Failed to kill %s topology: %s', topologyName, str(e))
            return False
        _safe_delete_file(params['readFile'])
        _safe_delete_file(params['outputFile'])
    expected_result = ''
    actual_result = ''
    retriesLeft = RETRY_COUNT
    while (retriesLeft > 0):
        retriesLeft -= 1
        try:
            with open(params['readFile'], 'r') as f:
                expected_result = f.read()
            with open(params['outputFile'], 'r') as g:
                actual_result = g.read()
        except Exception as e:
            logging.error('Failed to read expected or actual results from file for test %s: %s', test, e)
            cleanup_test()
            return False
        if (expected_result == actual_result):
            break
        if (retriesLeft > 0):
            expected_result = ''
            actual_result = ''
            logging.info(('Failed to get expected results for test %s (attempt %s/%s), ' + 'retrying after %s seconds'), test, (RETRY_COUNT - retriesLeft), RETRY_COUNT, RETRY_INTERVAL)
            time.sleep(RETRY_INTERVAL)
    cleanup_test()
    if (actual_result == expected_result):
        logging.info('Actual result matched expected result for test %s', test)
        logging.info(('Actual result ---------- \n' + actual_result))
        logging.info(('Expected result ---------- \n' + expected_result))
        return True
    else:
        logging.error('Actual result did not match expected result for test %s', test)
        logging.info(('Actual result ---------- \n' + actual_result))
        logging.info(('Expected result ---------- \n' + expected_result))
        return False
