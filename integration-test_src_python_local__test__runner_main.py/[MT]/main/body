def main():
    ' main '
    root = logging.getLogger()
    root.setLevel(logging.DEBUG)
    conf_file = DEFAULT_TEST_CONF_FILE
    conf_string = pkgutil.get_data(__name__, conf_file)
    decoder = json.JSONDecoder(strict=False)
    conf = decoder.decode(conf_string)
    heron_repo_directory = os.getcwd()
    args = dict()
    home_directory = os.path.expanduser('~')
    args['cluster'] = conf['cluster']
    args['topologyName'] = conf['topology']['topologyName']
    args['topologyClassPath'] = conf['topology']['topologyClassPath']
    args['workingDirectory'] = os.path.join(home_directory, '.herondata', 'topologies', conf['cluster'], getpass.getuser(), args['topologyName'])
    args['cliPath'] = os.path.expanduser(conf['heronCliPath'])
    args['trackerPath'] = os.path.expanduser(conf['heronTrackerPath'])
    args['trackerPort'] = _random_port()
    args['outputFile'] = os.path.join(args['workingDirectory'], conf['topology']['outputFile'])
    args['readFile'] = os.path.join(args['workingDirectory'], conf['topology']['readFile'])
    args['testJarPath'] = os.path.join(heron_repo_directory, conf['testJarPath'])
    test_classes = TEST_CLASSES
    if (len(sys.argv) > 1):
        first_arg = sys.argv[1]
        class_name = first_arg.split('.')
        if ((first_arg == '-h') or (len(class_name) < 2)):
            usage()
        import importlib
        test_classes = [getattr(importlib.import_module(class_name[0]), class_name[1])]
    start_time = time.time()
    (successes, failures) = run_tests(test_classes, args)
    elapsed_time = (time.time() - start_time)
    total = (len(failures) + len(successes))
    if (not failures):
        logging.info('Success: %s (all) tests passed', len(successes))
        logging.info('Elapsed time: %s', elapsed_time)
        sys.exit(0)
    else:
        logging.error('Fail: %s/%s test failed:', len(failures), total)
        for test in failures:
            logging.error('  - %s', test)
        sys.exit(1)
