def main():
    root = logging.getLogger()
    root.setLevel(logging.DEBUG)
    conf_file = DEFAULT_TEST_CONF_FILE
    confString = pkgutil.get_data(__name__, conf_file)
    decoder = json.JSONDecoder(strict=False)
    conf = decoder.decode(confString)
    heronRepoDirectory = (os.getcwd() + '/')
    parser = argparse.ArgumentParser(description='This is the heron integration test framework')
    parser.add_argument('-cl', '--congif-loader-classpath', dest='configLoaderClasspath', default=conf['configLoaderClasspath'])
    parser.add_argument('-hc', '--heron-cli-path', dest='heronCliPath', default=conf['heronCliPath'])
    parser.add_argument('-of', '--output-file', dest='outputFile', default=(conf['heronLocalWorkingDirectory'] + conf['topology']['outputFile']))
    parser.add_argument('-rf', '--read-file', dest='readFile', default=(conf['heronLocalWorkingDirectory'] + conf['topology']['readFile']))
    parser.add_argument('-rp', '--heron-core-path', dest='heronCorePath', default=(heronRepoDirectory + conf['heronCorePath']))
    parser.add_argument('-sc', '--scheduler-config-path', dest='schedulerConfigPath', default=(heronRepoDirectory + conf['schedulerConfigPath']))
    parser.add_argument('-tj', '--test-jar-path', dest='testJarPath', default=(heronRepoDirectory + conf['testJarPath']))
    parser.add_argument('-tn', '--topology-name', dest='topologyName', default=conf['topology']['topologyName'])
    parser.add_argument('-tp', '--topology-path', dest='topologyPath', default=conf['topology']['topologyClasspath'])
    parser.add_argument('-wd', '--heron-working-directory', dest='heronWorkingDirectory', default=(heronRepoDirectory + conf['heronLocalWorkingDirectory']))
    args = parser.parse_args()
    (successes, failures) = runAllTests(conf, args)
    if (not failures):
        logging.info(('Success: %s (all) tests passed' % len(successes)))
        sys.exit(0)
    else:
        logging.error(('Fail: %s test failed' % len(failures)))
        logging.info('Failed Tests: ')
        logging.info('\n'.join(failures))
        sys.exit(1)
