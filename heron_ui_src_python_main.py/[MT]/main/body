def main():
    '\n  :param argv:\n  :return:\n  '
    log.configure(logging.DEBUG, with_time=True)
    tornado.log.enable_pretty_logging()
    (parser, child_parser) = args.create_parsers()
    (parsed_args, remaining) = parser.parse_known_args()
    if remaining:
        child_parser.parse_args(args=remaining, namespace=parsed_args)
        parser.print_help()
        parser.exit()
    command_line_args = vars(parsed_args)
    Log.info('Listening at http://%s:%d', command_line_args['address'], command_line_args['port'])
    Log.info('Using tracker url: %s', command_line_args['tracker_url'])
    define_options(command_line_args['address'], command_line_args['port'], command_line_args['tracker_url'])
    http_server = tornado.httpserver.HTTPServer(Application())
    http_server.listen(command_line_args['port'], address=command_line_args['address'])

    def signal_handler(signum, frame):
        print '\n',
        Log.debug('SIGINT received. Stopping UI')
        tornado.ioloop.IOLoop.instance().stop()
    signal.signal(signal.SIGINT, signal_handler)
    signal.signal(signal.SIGTERM, signal_handler)
    tornado.ioloop.IOLoop.instance().start()
