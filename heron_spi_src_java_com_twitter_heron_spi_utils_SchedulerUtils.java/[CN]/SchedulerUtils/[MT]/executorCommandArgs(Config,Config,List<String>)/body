{
  TopologyAPI.Topology topology=Runtime.topology(runtime);
  String masterPort=freePorts.get(0);
  String tmasterControllerPort=freePorts.get(1);
  String tmasterStatsPort=freePorts.get(2);
  String shellPort=freePorts.get(3);
  String metricsmgrPort=freePorts.get(4);
  String schedulerPort=freePorts.get(5);
  List<String> commands=new ArrayList<>();
  commands.add(topology.getName());
  commands.add(topology.getId());
  commands.add(FileUtils.getBaseName(Context.topologyDefinitionFile(config)));
  commands.add(Runtime.instanceDistribution(runtime));
  commands.add(Context.stateManagerConnectionString(config));
  commands.add(Context.stateManagerRootPath(config));
  commands.add(Context.tmasterSandboxBinary(config));
  commands.add(Context.stmgrSandboxBinary(config));
  commands.add(Context.metricsManagerSandboxClassPath(config));
  commands.add(SchedulerUtils.encodeJavaOpts(TopologyUtils.getInstanceJvmOptions(topology)));
  commands.add(TopologyUtils.makeClassPath(topology,Context.topologyBinaryFile(config)));
  commands.add(masterPort);
  commands.add(tmasterControllerPort);
  commands.add(tmasterStatsPort);
  commands.add(Context.systemConfigSandboxFile(config));
  commands.add(Runtime.componentRamMap(runtime));
  commands.add(SchedulerUtils.encodeJavaOpts(TopologyUtils.getComponentJvmOptions(topology)));
  commands.add(Context.topologyPackageType(config));
  commands.add(Context.topologyBinaryFile(config));
  commands.add(Context.javaSandboxHome(config));
  commands.add(shellPort);
  commands.add(Context.shellSandboxBinary(config));
  commands.add(metricsmgrPort);
  commands.add(Context.cluster(config));
  commands.add(Context.role(config));
  commands.add(Context.environ(config));
  commands.add(Context.instanceSandboxClassPath(config));
  commands.add(Context.metricsSinksSandboxFile(config));
  String completeSchedulerProcessClassPath=new StringBuilder().append(Context.schedulerSandboxClassPath(config)).append(":").append(Context.packingSandboxClassPath(config)).append(":").append(Context.stateManagerSandboxClassPath(config)).toString();
  commands.add(completeSchedulerProcessClassPath);
  commands.add(schedulerPort);
  commands.add(Context.pythonInstanceSandboxBinary(config));
  return commands.toArray(new String[commands.size()]);
}
