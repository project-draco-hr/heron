def run(command, parser, cl_args, unknown_args, action):
    '\n  helper function to take action on topologies\n  :param command:\n  :param parser:\n  :param cl_args:\n  :param unknown_args:\n  :param action:        description of action taken\n  :return:\n  '
    try:
        topology_name = cl_args['topology-name']
        new_args = ['--cluster', cl_args['cluster'], '--role', cl_args['role'], '--environment', cl_args['environ'], '--heron_home', utils.get_heron_dir(), '--config_path', cl_args['config_path'], '--override_config_file', cl_args['override_config_file'], '--release_file', utils.get_heron_release_file(), '--topology_name', topology_name, '--command', command]
        if opts.verbose():
            new_args.append('--verbose')
        lib_jars = utils.get_heron_libs((jars.scheduler_jars() + jars.statemgr_jars()))
        execute.heron_class('com.twitter.heron.scheduler.RuntimeManagerMain', lib_jars, extra_jars=[], args=new_args)
    except Exception:
        Log.error(("Failed to %s '%s'" % (action, topology_name)))
        return False
    Log.info(("Successfully %s '%s'" % (action, topology_name)))
    return True
