{
  if (helper.isTerminatedComponent()) {
    return null;
  }
  HeronTuples.HeronDataTuple.Builder bldr=HeronTuples.HeronDataTuple.newBuilder();
  bldr.setKey(0);
  List<Integer> customGroupingTargetTaskIds=null;
  if (!helper.isCustomGroupingEmpty()) {
    customGroupingTargetTaskIds=helper.chooseTasksForCustomStreamGrouping(streamId,tuple);
    if (customGroupingTargetTaskIds != null) {
      bldr.addAllDestTaskIds(customGroupingTargetTaskIds);
    }
  }
  helper.getTopologyContext().invokeHookEmit(tuple,streamId,customGroupingTargetTaskIds);
  if (anchors != null) {
    Set<HeronTuples.RootId> mergedRoots=new HashSet<HeronTuples.RootId>();
    for (    Tuple tpl : anchors) {
      if (tpl instanceof TupleImpl) {
        TupleImpl t=(TupleImpl)tpl;
        mergedRoots.addAll(t.getRoots());
      }
    }
    for (    HeronTuples.RootId rt : mergedRoots) {
      bldr.addRoots(rt);
    }
  }
  long tupleSizeInBytes=0;
  for (  Object obj : tuple) {
    byte[] b=serializer.serialize(obj);
    ByteString bstr=ByteString.copyFrom(b);
    bldr.addValues(bstr);
    tupleSizeInBytes+=b.length;
  }
  outputter.addDataTuple(streamId,bldr,tupleSizeInBytes);
  boltMetrics.emittedTuple(streamId);
  return null;
}
