@tornado.gen.coroutine
def getMetricsTimeline(self, tmaster, componentName, metricNames, instances, startTime, endTime, callback=None):
    '\n    Get the specified metrics for the given component name of this topology.\n    Returns the following dict on success:\n    {\n      "timeline": {\n        <metricname>: {\n          <instance>: {\n            <start_time> : <numeric value>,\n            <start_time> : <numeric value>,\n            ...\n          }\n          ...\n        }, ...\n      },\n      "starttime": <numeric value>,\n      "endtime": <numeric value>,\n      "component": "..."\n    }\n\n    Returns the following dict on failure:\n    {\n      "message": "..."\n    }\n    '
    if ((not tmaster) or (not tmaster.host) or (not tmaster.stats_port)):
        raise Exception('No Tmaster found')
    host = tmaster.host
    port = tmaster.stats_port
    metricRequest = tmaster_pb2.MetricRequest()
    metricRequest.component_name = componentName
    if (len(instances) > 0):
        for instance in instances:
            metricRequest.instance_id.append(instance)
    for metricName in metricNames:
        metricRequest.metric.append(metricName)
    metricRequest.explicit_interval.start = startTime
    metricRequest.explicit_interval.end = endTime
    metricRequest.minutely = True
    metricRequestString = metricRequest.SerializeToString()
    url = 'http://{0}:{1}/stats'.format(host, port)
    request = tornado.httpclient.HTTPRequest(url, body=metricRequestString, method='POST', request_timeout=5)
    LOG.debug('Making HTTP call to fetch metrics')
    LOG.debug(('url: ' + url))
    try:
        client = tornado.httpclient.AsyncHTTPClient()
        result = yield client.fetch(request)
        LOG.debug('HTTP call complete.')
    except tornado.httpclient.HTTPError as e:
        raise Exception(str(e))
    responseCode = result.code
    print responseCode
    if (responseCode >= 400):
        message = ('Error in getting metrics from Tmaster, code: ' + responseCode)
        LOG.error(message)
        raise Exception(message)
    metricResponse = tmaster_pb2.MetricResponse()
    metricResponse.ParseFromString(result.body)
    if (metricResponse.status.status == common_pb2.NOTOK):
        if metricResponse.status.HasField('message'):
            raise Exception(metricResponse.status.message)
    ret = {}
    ret['starttime'] = startTime
    ret['endtime'] = endTime
    ret['component'] = componentName
    ret['timeline'] = {}
    for metric in metricResponse.metric:
        instance = metric.instance_id
        for im in metric.metric:
            metricname = im.name
            if (metricname not in ret['timeline']):
                ret['timeline'][metricname] = {}
            if (instance not in ret['timeline'][metricname]):
                ret['timeline'][metricname][instance] = {}
            for interval_value in im.interval_values:
                ret['timeline'][metricname][instance][interval_value.interval.start] = interval_value.value
    if (not ret['timeline']):
        raise Exception('No metrics found')
    raise tornado.gen.Return(ret)
