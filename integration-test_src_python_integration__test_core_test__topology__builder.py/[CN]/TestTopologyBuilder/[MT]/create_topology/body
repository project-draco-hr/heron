def create_topology(self):
    'Creates an integration-test topology class'
    aggregator_config = {integ_const.HTTP_POST_URL_KEY: self.output_location, }
    self.add_bolt(self.TERMINAL_BOLT_NAME, self.TERMINAL_BOLT_CLASS, 1, inputs={}, config=aggregator_config)
    for (name, bolt_spec) in self.bolts.iteritems():
        if (name == self.TERMINAL_BOLT_NAME):
            continue
        bolt_protobuf = bolt_spec.get_protobuf()
        for istream in bolt_protobuf.inputs:
            parent = istream.stream.component_name
            if (name in self.prev):
                self.prev[name].add(parent)
            else:
                parents = set()
                parents.add(parent)
                self.prev[name] = parents
    terminals = set()
    non_terminals = set()
    for parent_set in self.prev.values():
        non_terminals.update(parent_set)
    for bolt_name in self.prev.keys():
        if (bolt_name not in non_terminals):
            terminals.add(bolt_name)
    for spout_name in self.spouts.keys():
        if (spout_name not in non_terminals):
            terminals.add(spout_name)
    for child in self.prev.keys():
        for parent in self.prev[child]:
            self._add_all_grouping(child, parent, integ_const.INTEGRATION_TEST_CONTROL_STREAM_ID)
    for terminal in terminals:
        if (terminal in self.bolts):
            terminal_outputs = self.bolts[terminal].outputs
        else:
            terminal_outputs = self.spouts[terminal].outputs
        stream_ids = [('default' if isinstance(out, str) else out.stream_id) for out in terminal_outputs]
        for stream_id in set(stream_ids):
            self._add_all_grouping(self.TERMINAL_BOLT_NAME, terminal, stream_id)
    class_dict = self._construct_topo_class_dict()
    return TopologyType(self.topology_name, (Topology,), class_dict)
