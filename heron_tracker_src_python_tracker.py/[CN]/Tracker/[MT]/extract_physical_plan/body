def extract_physical_plan(self, topology):
    '\n    Returns the representation of physical plan that will\n    be returned from Tracker.\n    '
    physicalPlan = {'instances': {}, 'stmgrs': {}, 'spouts': {}, 'bolts': {}, 'config': {}, }
    if (not topology.physical_plan):
        return physicalPlan
    spouts = topology.spouts()
    bolts = topology.bolts()
    stmgrs = None
    instances = None
    stmgrs = list(topology.physical_plan.stmgrs)
    instances = list(topology.physical_plan.instances)
    if topology.physical_plan.topology.topology_config:
        for kvs in topology.physical_plan.topology.topology_config.kvs:
            if kvs.value:
                physicalPlan['config'][kvs.key] = kvs.value
            elif kvs.java_serialized_value:
                try:
                    pobj = javaobj.loads(kvs.java_serialized_value)
                    physicalPlan['config'][kvs.key] = {'value': json.dumps(pobj, default=(lambda custom_field: custom_field.__dict__), sort_keys=True, indent=2), 'raw': utils.hex_escape(kvs.java_serialized_value), }
                except Exception:
                    physicalPlan['config'][kvs.key] = {'value': 'A Java Object', 'raw': utils.hex_escape(kvs.java_serialized_value), }
    for spout in spouts:
        spout_name = spout.comp.name
        physicalPlan['spouts'][spout_name] = []
    for bolt in bolts:
        bolt_name = bolt.comp.name
        physicalPlan['bolts'][bolt_name] = []
    for stmgr in stmgrs:
        host = stmgr.host_name
        cwd = stmgr.cwd
        shell_port = (stmgr.shell_port if stmgr.HasField('shell_port') else None)
        physicalPlan['stmgrs'][stmgr.id] = {'id': stmgr.id, 'host': host, 'port': stmgr.data_port, 'shell_port': shell_port, 'cwd': cwd, 'pid': stmgr.pid, 'joburl': utils.make_shell_job_url(host, shell_port, cwd), 'logfiles': utils.make_shell_logfiles_url(host, shell_port, cwd), 'instance_ids': [], }
    for instance in instances:
        instance_id = instance.instance_id
        stmgrId = instance.stmgr_id
        name = instance.info.component_name
        stmgrInfo = physicalPlan['stmgrs'][stmgrId]
        host = stmgrInfo['host']
        cwd = stmgrInfo['cwd']
        shell_port = stmgrInfo['shell_port']
        physicalPlan['instances'][instance_id] = {'id': instance_id, 'name': name, 'stmgrId': stmgrId, 'logfile': utils.make_shell_logfiles_url(host, shell_port, cwd, instance.instance_id), }
        physicalPlan['stmgrs'][stmgrId]['instance_ids'].append(instance_id)
        if (name in physicalPlan['spouts']):
            physicalPlan['spouts'][name].append(instance_id)
        else:
            physicalPlan['bolts'][name].append(instance_id)
    return physicalPlan
