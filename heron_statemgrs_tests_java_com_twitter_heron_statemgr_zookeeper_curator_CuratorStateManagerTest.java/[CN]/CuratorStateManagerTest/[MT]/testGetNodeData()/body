{
  CuratorStateManager spyStateManager=Mockito.spy(new CuratorStateManager());
  final CuratorFramework mockClient=Mockito.mock(CuratorFramework.class);
  GetDataBuilder mockGetBuilder=Mockito.mock(GetDataBuilder.class);
  @SuppressWarnings("rawtypes") BackgroundPathable mockBackPathable=Mockito.mock(BackgroundPathable.class);
  final CuratorEvent mockEvent=Mockito.mock(CuratorEvent.class);
  Message.Builder mockBuilder=Mockito.mock(Message.Builder.class);
  Message mockMessage=Mockito.mock(Message.class);
  final byte[] data="wy_1989".getBytes();
  Mockito.doReturn(mockMessage).when(mockBuilder).build();
  Mockito.doReturn(data).when(mockEvent).getData();
  Mockito.doReturn(PATH).when(mockEvent).getPath();
  Mockito.doReturn(mockClient).when(spyStateManager).getCuratorClient();
  Mockito.doReturn(true).when(mockClient).blockUntilConnected(Mockito.anyInt(),Mockito.any(TimeUnit.class));
  Mockito.doReturn(mockGetBuilder).when(mockClient).getData();
  Mockito.doReturn(mockBackPathable).when(mockGetBuilder).usingWatcher(Mockito.any(Watcher.class));
  Mockito.doAnswer(new Answer<Object>(){
    @Override public Object answer(    InvocationOnMock invocationOnMock) throws Throwable {
      Object[] objests=invocationOnMock.getArguments();
      ((BackgroundCallback)objests[0]).processResult(mockClient,mockEvent);
      return null;
    }
  }
).when(mockBackPathable).inBackground(Mockito.any(BackgroundCallback.class));
  spyStateManager.initialize(config);
  ListenableFuture<Message> result=spyStateManager.getNodeData(null,PATH,mockBuilder);
  Assert.assertTrue(result.get().equals(mockMessage));
}
