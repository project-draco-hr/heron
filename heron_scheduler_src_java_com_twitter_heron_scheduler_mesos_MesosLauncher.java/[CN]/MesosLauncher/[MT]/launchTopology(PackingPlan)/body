{
  Map<String,String> configOverrides=new HashMap<>();
  configOverrides.put("CLASSPATH",TopologyUtility.makeClasspath(topology));
  configOverrides.put("COMPONENT_JVM_OPTS_IN_BASE64",safeEncodeB64(TopologyUtility.getComponentJvmOptions(topology)));
  configOverrides.put("COMPONENT_RAMMAP",TopologyUtility.formatRamMap(TopologyUtility.getComponentRamMap(topology)));
  configOverrides.put("CLUSTER",cluster);
  configOverrides.put("ENVIRON",environ);
  configOverrides.put("HERON_INTERNALS_CONFIG_FILENAME",FileUtils.getBaseName(SubmitterMain.getHeronInternalsConfigFile()));
  configOverrides.put("HERON_JAVA_HOME",context.getProperty("heron.java.home.path","/usr/lib/jvm/java-1.8.0-twitter"));
  configOverrides.put("INSTANCE_DISTRIBUTION",TopologyUtility.packingToString(packing));
  configOverrides.put("INSTANCE_JVM_OPTS_IN_BASE64",safeEncodeB64(TopologyUtility.getInstanceJvmOptions(topology)));
  configOverrides.put("ISPRODUCTION","" + ("prod".equals(environ)));
  configOverrides.put("JOB_NAME",topology.getName());
  configOverrides.put("LOG_DIR",context.getProperty("heron.logging.directory","log-files"));
  configOverrides.put("METRICS_MGR_CLASSPATH","metrics-mgr-classpath/*");
  configOverrides.put("NUM_SHARDS","" + (1 + TopologyUtility.getNumContainer(topology)));
  configOverrides.put("PKG_TYPE",(FileUtils.isOriginalPackageJar(FileUtils.getBaseName(SubmitterMain.getOriginalPackageFile())) ? "jar" : "tar"));
  configOverrides.put("STMGR_BINARY","heron-stmgr");
  configOverrides.put("TMASTER_BINARY","heron-tmaster");
  configOverrides.put("HERON_SHELL_BINARY","heron-shell");
  configOverrides.put("TOPOLOGY_DEFN",topology.getName() + ".defn");
  configOverrides.put("TOPOLOGY_ID",topology.getId());
  configOverrides.put("TOPOLOGY_JAR_FILE",FileUtils.getBaseName(SubmitterMain.getOriginalPackageFile()));
  configOverrides.put("TOPOLOGY_NAME",topology.getName());
  configOverrides.put("ZK_NODE",context.getProperty(Constants.ZK_CONNECTION_STRING));
  configOverrides.put("ZK_ROOT",context.getProperty(FileSystemStateManager.ROOT_ADDRESS));
  configOverrides.put(Constants.HERON_CORE_RELEASE_URI,String.format("%s",getHeronCoreHdfsPath()));
  configOverrides.put(Constants.TOPOLOGY_PKG_URI,String.format("%s",getTopologyHdfsPath()));
  configOverrides.put(MesosConfig.MESOS_MASTER_URI_PREFIX,getMesosMasterUri());
  configOverrides.put(Constants.TOPOLOGY_DEFINITION_FILE,topology.getName() + ".defn");
  configOverrides.put(Constants.ROLE,role);
  for (  Map.Entry<Object,Object> entry : context.getConfig().entrySet()) {
    String key=(String)entry.getKey();
    if (!configOverrides.containsKey(key)) {
      configOverrides.put(key,(String)entry.getValue());
    }
  }
  LOG.info("Launching topology in mesos");
  StringBuilder overrideBuilder=new StringBuilder();
  for (  String key : configOverrides.keySet()) {
    overrideBuilder.append(String.format("%s=%s ",key,safeEncodeB64(configOverrides.get(key))));
  }
  overrideBuilder.deleteCharAt(overrideBuilder.length() - 1);
  String jobDefInJSON=getJobInJSON(safeEncodeB64(overrideBuilder.toString()));
  String endpoint=String.format("%s/%s",context.getPropertyWithException(MesosConfig.HERON_MESOS_FRAMEWORK_ENDPOINT),"submit");
  LOG.info("Sending submit request to HSS: " + endpoint);
  HttpURLConnection connection;
  try {
    connection=NetworkUtility.getConnection(endpoint);
  }
 catch (  IOException e) {
    LOG.log(Level.SEVERE,"Failed to connect to endpoint: " + endpoint);
    return false;
  }
  if (!NetworkUtility.sendHttpPostRequest(connection,jobDefInJSON.getBytes())) {
    LOG.severe("Failed to send http request");
    connection.disconnect();
    return false;
  }
  try {
    if (connection.getResponseCode() != HttpURLConnection.HTTP_OK) {
      LOG.severe("Response code is not ok: " + connection.getResponseCode());
      return false;
    }
  }
 catch (  IOException e) {
    LOG.log(Level.SEVERE,"Failed to get response code",e);
  }
 finally {
    connection.disconnect();
  }
  return true;
}
