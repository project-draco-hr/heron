{
  long topologyRam=0;
  long topologyDisk=0;
  double topologyCpu=0.0;
  for (  Map.Entry<String,List<String>> entry : ffdAllocation.entrySet()) {
    String containerId=entry.getKey();
    List<String> instanceList=entry.getValue();
    long containerRam=0;
    long containerDiskInBytes=0;
    double containerCpu=0;
    Map<String,PackingPlan.InstancePlan> instancePlanMap=new HashMap<>();
    for (    String instanceId : instanceList) {
      long instanceRam=0;
      if (ramMap.containsKey(getComponentName(instanceId))) {
        instanceRam=ramMap.get(getComponentName(instanceId));
      }
 else {
        instanceRam=instanceRamDefault;
      }
      containerRam+=instanceRam;
      long instanceDisk=instanceDiskDefault;
      containerDiskInBytes+=instanceDisk;
      double instanceCpu=instanceCpuDefault;
      containerCpu+=instanceCpu;
      Resource resource=new Resource(instanceCpu,instanceRam,instanceDisk);
      PackingPlan.InstancePlan instancePlan=new PackingPlan.InstancePlan(instanceId,getComponentName(instanceId),resource);
      instancePlanMap.put(instanceId,instancePlan);
    }
    containerCpu+=(paddingPercentage * containerCpu) / 100;
    containerRam+=(paddingPercentage * containerRam) / 100;
    containerDiskInBytes+=(paddingPercentage * containerDiskInBytes) / 100;
    Resource resource=new Resource(Math.round(containerCpu),containerRam,containerDiskInBytes);
    PackingPlan.ContainerPlan containerPlan=new PackingPlan.ContainerPlan(containerId,instancePlanMap,resource);
    containerPlanMap.put(containerId,containerPlan);
    topologyRam+=containerRam;
    topologyCpu+=Math.round(containerCpu);
    topologyDisk+=containerDiskInBytes;
  }
  if (!scale) {
    topologyRam+=instanceRamDefault;
    topologyDisk+=instanceDiskDefault;
    topologyCpu+=instanceCpuDefault;
  }
  return new Resource(topologyCpu,topologyRam,topologyDisk);
}
