{
  Map<String,List<String>> allocation=new HashMap<>();
  ArrayList<Container> containers=new ArrayList<>();
  int globalTaskIndex=1;
  Map<String,Integer> parallelismMap=TopologyUtils.getComponentParallelism(topology);
  ArrayList<RamRequirement> ramRequirements=getSortedRAMInstances();
  if (ramRequirements == null) {
    return null;
  }
  for (int i=0; i < ramRequirements.size(); i++) {
    String component=ramRequirements.get(i).getComponentName();
    int numInstance=parallelismMap.get(component);
    for (int j=0; j < numInstance; j++) {
      int containerId=placeFFDInstance(containers,ramRequirements.get(i).getRamRequirement(),instanceCpuDefault,instanceDiskDefault);
      if (allocation.containsKey(getContainerId(containerId))) {
        allocation.get(getContainerId(containerId)).add(getInstanceId(containerId,component,globalTaskIndex,j));
      }
 else {
        ArrayList<String> instance=new ArrayList<>();
        instance.add(getInstanceId(containerId,component,globalTaskIndex,j));
        allocation.put(getContainerId(containerId),instance);
      }
      globalTaskIndex++;
    }
  }
  return allocation;
}
