{
  Map<Integer,List<String>> allocation=new HashMap<>();
  ArrayList<Container> containers=new ArrayList<>();
  ArrayList<RamRequirement> ramRequirements=getSortedRAMInstances(parallelismMap);
  int globalTaskIndex=1;
  for (  RamRequirement ramRequirement : ramRequirements) {
    String component=ramRequirement.getComponentName();
    int numInstance=parallelismMap.get(component);
    for (int j=0; j < numInstance; j++) {
      Resource instanceResource=this.defaultInstanceResources.cloneWithRam(ramRequirement.getRamRequirement());
      int containerId=placeFFDInstance(containers,instanceResource);
      if (allocation.containsKey(containerId + numContainers)) {
        allocation.get(containerId + numContainers).add(PackingUtils.getInstanceId(containerId + numContainers,component,globalTaskIndex,j));
      }
 else {
        ArrayList<String> instance=new ArrayList<>();
        instance.add(PackingUtils.getInstanceId(containerId + numContainers,component,globalTaskIndex,j));
        allocation.put(containerId + numContainers,instance);
      }
      globalTaskIndex++;
    }
  }
  return allocation;
}
