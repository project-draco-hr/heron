def run(command, parser, cl_args, unknown_args):
    '\n  Submits the topology to the scheduler\n    * Depending on the topology file name extension, we treat the file as a\n      fatjar (if the ext is .jar) or a tar file (if the ext is .tar/.tar.gz).\n    * We upload the topology file to the packer, update zookeeper and launch\n      scheduler jobs representing that topology\n    * You can see your topology in Heron UI\n  :param command:\n  :param parser:\n  :param cl_args:\n  :param unknown_args:\n  :return:\n  '
    topology_file = cl_args['topology-file-name']
    if (not os.path.isfile(topology_file)):
        Log.error(('Topology jar|tar|pex file %s does not exist' % topology_file))
        return False
    jar_type = topology_file.endswith('.jar')
    tar_type = (topology_file.endswith('.tar') or topology_file.endswith('.tar.gz'))
    pex_type = topology_file.endswith('.pex')
    if ((not jar_type) and (not tar_type) and (not pex_type)):
        Log.error('Unknown file type. Please use .tar or .tar.gz or .jar or .pex file')
        return False
    if cl_args['extra_launch_classpath']:
        valid_classpath = classpath.valid_java_classpath(cl_args['extra_launch_classpath'])
        if (not valid_classpath):
            Log.error('One of jar or directory in extra launch classpath does not exist')
            return False
    tmp_dir = tempfile.mkdtemp()
    if cl_args['deploy_deactivated']:
        initial_state = topology_pb2.TopologyState.Name(topology_pb2.PAUSED)
    else:
        initial_state = topology_pb2.TopologyState.Name(topology_pb2.RUNNING)
    opts.set_config('cmdline.topologydefn.tmpdirectory', tmp_dir)
    opts.set_config('cmdline.topology.initial.state', initial_state)
    if jar_type:
        return submit_fatjar(cl_args, unknown_args, tmp_dir)
    elif tar_type:
        return submit_tar(cl_args, unknown_args, tmp_dir)
    elif pex_type:
        return submit_pex(cl_args, unknown_args, tmp_dir)
    return False
