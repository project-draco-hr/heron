{
  IStateManager statemgr=Mockito.mock(IStateManager.class);
  ILauncher launcher=Mockito.mock(ILauncher.class);
  IPacking packing=Mockito.mock(IPacking.class);
  IUploader uploader=Mockito.mock(IUploader.class);
  PowerMockito.spy(ReflectionUtils.class);
  PowerMockito.doReturn(statemgr).when(ReflectionUtils.class,"newInstance",STATE_MANAGER_CLASS);
  PowerMockito.doReturn(launcher).when(ReflectionUtils.class,"newInstance",LAUNCHER_CLASS);
  PowerMockito.doReturn(packing).when(ReflectionUtils.class,"newInstance",PACKING_CLASS);
  PowerMockito.doReturn(uploader).when(ReflectionUtils.class,"newInstance",UPLOADER_CLASS);
  Config config=Mockito.mock(Config.class);
  Mockito.when(config.getStringValue(ConfigKeys.get(STATE_MANAGER_CLASS))).thenReturn(STATE_MANAGER_CLASS);
  Mockito.when(config.getStringValue(ConfigKeys.get(LAUNCHER_CLASS))).thenReturn(LAUNCHER_CLASS);
  Mockito.when(config.getStringValue(ConfigKeys.get(PACKING_CLASS))).thenReturn(PACKING_CLASS);
  Mockito.when(config.getStringValue(ConfigKeys.get(UPLOADER_CLASS))).thenReturn(UPLOADER_CLASS);
  TopologyAPI.Topology topology=TopologyAPI.Topology.getDefaultInstance();
  SubmitterMain submitterMain=Mockito.spy(new SubmitterMain(config,topology));
  final String CLASS_NOT_EXIST="class_not_exist";
  Mockito.when(config.getStringValue(ConfigKeys.get(UPLOADER_CLASS))).thenReturn(CLASS_NOT_EXIST);
  Assert.assertFalse(submitterMain.submitTopology());
  Mockito.verify(uploader,Mockito.never()).close();
  Mockito.verify(packing,Mockito.never()).close();
  Mockito.verify(launcher,Mockito.never()).close();
  Mockito.verify(statemgr,Mockito.never()).close();
  Mockito.when(config.getStringValue(ConfigKeys.get(UPLOADER_CLASS))).thenReturn(UPLOADER_CLASS);
  Mockito.doReturn(false).when(submitterMain).validateSubmit(Mockito.any(SchedulerStateManagerAdaptor.class),Mockito.anyString());
  Assert.assertFalse(submitterMain.submitTopology());
  Mockito.verify(uploader,Mockito.atLeastOnce()).close();
  Mockito.verify(packing,Mockito.atLeastOnce()).close();
  Mockito.verify(launcher,Mockito.atLeastOnce()).close();
  Mockito.verify(statemgr,Mockito.atLeastOnce()).close();
  Mockito.doReturn(true).when(submitterMain).validateSubmit(Mockito.any(SchedulerStateManagerAdaptor.class),Mockito.anyString());
  Mockito.doReturn(null).when(submitterMain).uploadPackage(Mockito.eq(uploader));
  Assert.assertFalse(submitterMain.submitTopology());
  Mockito.verify(uploader,Mockito.never()).undo();
  final URI packageURI=new URI("mock://uri:924/x#ke");
  Mockito.doReturn(packageURI).when(submitterMain).uploadPackage(Mockito.eq(uploader));
  Mockito.doReturn(false).when(submitterMain).callLauncherRunner(Mockito.any(Config.class));
  Assert.assertFalse(submitterMain.submitTopology());
  Mockito.verify(uploader).undo();
  Mockito.doReturn(true).when(submitterMain).callLauncherRunner(Mockito.any(Config.class));
  Assert.assertTrue(submitterMain.submitTopology());
}
