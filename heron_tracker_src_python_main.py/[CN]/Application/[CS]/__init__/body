def __init__(self):
    tracker = Tracker()
    self.tracker = tracker
    tracker.synch_topologies(options.config_file)
    tornadoHandlers = [('/', handlers.MainHandler), ('/topologies', handlers.TopologiesHandler, {'tracker': tracker, }), ('/topologies/states', handlers.StatesHandler, {'tracker': tracker, }), ('/topologies/info', handlers.TopologyHandler, {'tracker': tracker, }), ('/topologies/logicalplan', handlers.LogicalPlanHandler, {'tracker': tracker, }), ('/topologies/logfiledata', handlers.LogfileDataHandler, {'tracker': tracker, }), ('/topologies/physicalplan', handlers.PhysicalPlanHandler, {'tracker': tracker, }), ('/topologies/executionstate', handlers.ExecutionStateHandler, {'tracker': tracker, }), ('/topologies/metrics', handlers.MetricsHandler, {'tracker': tracker, }), ('/topologies/metricstimeline', handlers.MetricsTimelineHandler, {'tracker': tracker, }), ('/topologies/metricsquery', handlers.MetricsQueryHandler, {'tracker': tracker, }), ('/topologies/exceptions', handlers.ExceptionHandler, {'tracker': tracker, }), ('/topologies/exceptionsummary', handlers.ExceptionSummaryHandler, {'tracker': tracker, }), ('/machines', handlers.MachinesHandler, {'tracker': tracker, }), ('/topologies/pid', handlers.PidHandler, {'tracker': tracker, }), ('/topologies/jstack', handlers.JstackHandler, {'tracker': tracker, }), ('/topologies/jmap', handlers.JmapHandler, {'tracker': tracker, }), ('/topologies/histo', handlers.MemoryHistogramHandler, {'tracker': tracker, }), ('(.*)', handlers.DefaultHandler)]
    settings = dict(debug=True, serve_traceback=True, static_path=os.path.dirname(__file__))
    tornado.web.Application.__init__(self, tornadoHandlers, **settings)
