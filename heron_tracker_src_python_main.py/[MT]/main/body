def main():
    ' main '
    (parser, _) = create_parsers()
    (args, remaining) = parser.parse_known_args()
    if (remaining == ['help']):
        parser.print_help()
        parser.exit()
    elif (remaining == ['version']):
        common_config.print_version()
        parser.exit()
    elif (remaining != []):
        Log.error('Invalid subcommand')
        sys.exit(1)
    namespace = vars(args)
    log.set_logging_level(namespace)
    define_options(namespace['port'], namespace['config_file'])
    application = Application()

    def signal_handler(signum, frame):
        print '\n',
        application.stop()
        tornado.ioloop.IOLoop.instance().stop()
    signal.signal(signal.SIGINT, signal_handler)
    signal.signal(signal.SIGTERM, signal_handler)
    Log.info('Running on port: %d', namespace['port'])
    Log.info('Using config file: %s', namespace['config_file'])
    http_server = tornado.httpserver.HTTPServer(application)
    http_server.listen(namespace['port'])
    tornado.ioloop.IOLoop.instance().start()
