{
  int numContainers=2;
  int spoutParallelism=4;
  int boltParallelism=3;
  com.twitter.heron.api.Config topologyConfig=new com.twitter.heron.api.Config();
  topologyConfig.put(com.twitter.heron.api.Config.TOPOLOGY_STMGRS,numContainers);
  long containerRam=10L * Constants.GB;
  long containerDisk=20L * Constants.GB;
  float containerCpu=30;
  topologyConfig.setContainerRamRequested(containerRam);
  topologyConfig.setContainerDiskRequested(containerDisk);
  topologyConfig.setContainerCpuRequested(containerCpu);
  TopologyAPI.Topology topologyExplicitResourcesConfig=getTopology(spoutParallelism,boltParallelism,topologyConfig);
  PackingPlan packingPlanExplicitResourcesConfig=getResourceCompliantRRPackingPlan(topologyExplicitResourcesConfig);
  Assert.assertEquals(packingPlanExplicitResourcesConfig.containers.size(),numContainers);
  Assert.assertEquals((long)(Math.round(4 * instanceCpuDefault + DEFAULT_CONTAINER_PADDING / 100.0 * (4 * instanceCpuDefault)) + Math.round(3 * instanceCpuDefault + DEFAULT_CONTAINER_PADDING / 100.0 * (3 * instanceCpuDefault)) + instanceCpuDefault),(long)packingPlanExplicitResourcesConfig.resource.cpu);
  Assert.assertEquals((4 * instanceRamDefault) + (long)((DEFAULT_CONTAINER_PADDING / 100.0) * (4 * instanceRamDefault)) + 3 * instanceRamDefault + (long)((DEFAULT_CONTAINER_PADDING / 100.0) * (3 * instanceRamDefault)) + instanceRamDefault,packingPlanExplicitResourcesConfig.resource.ram);
  Assert.assertEquals(4 * instanceDiskDefault + (long)((DEFAULT_CONTAINER_PADDING / 100.0) * (4 * instanceDiskDefault)) + 3 * instanceDiskDefault + (long)((DEFAULT_CONTAINER_PADDING / 100.0) * (3 * instanceDiskDefault)) + instanceDiskDefault,packingPlanExplicitResourcesConfig.resource.disk);
  for (  PackingPlan.ContainerPlan containerPlan : packingPlanExplicitResourcesConfig.containers.values()) {
    for (    PackingPlan.InstancePlan instancePlan : containerPlan.instances.values()) {
      Assert.assertEquals(instanceRamDefault,instancePlan.resource.ram);
    }
  }
}
