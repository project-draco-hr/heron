{
  int numContainers=1;
  int spoutParallelism=4;
  int boltParallelism=3;
  com.twitter.heron.api.Config topologyConfig=new com.twitter.heron.api.Config();
  topologyConfig.put(com.twitter.heron.api.Config.TOPOLOGY_STMGRS,numContainers);
  long containerRam=2L * Constants.GB;
  topologyConfig.setContainerRamRequested(containerRam);
  TopologyAPI.Topology topology=getTopology(spoutParallelism,boltParallelism,topologyConfig);
  PackingPlan packingPlan=getResourceCompliantRRPackingPlan(topology);
  Assert.assertEquals(packingPlan.containers.size(),4);
  Assert.assertEquals((long)(Math.round(2 * instanceCpuDefault + DEFAULT_CONTAINER_PADDING / 100.0 * (2 * instanceCpuDefault)) + Math.round(2 * instanceCpuDefault + DEFAULT_CONTAINER_PADDING / 100.0 * (2 * instanceCpuDefault)) + Math.round(2 * instanceCpuDefault + DEFAULT_CONTAINER_PADDING / 100.0 * (2 * instanceCpuDefault))+ Math.round(HERON_INTERNAL_CONTAINERS * instanceCpuDefault + DEFAULT_CONTAINER_PADDING / 100.0 * (HERON_INTERNAL_CONTAINERS * instanceCpuDefault))+ instanceCpuDefault),(long)packingPlan.resource.cpu);
  Assert.assertEquals(2 * instanceRamDefault + (long)((DEFAULT_CONTAINER_PADDING / 100.0) * (2 * instanceRamDefault)) + 2 * instanceRamDefault + (long)((DEFAULT_CONTAINER_PADDING / 100.0) * (2 * instanceRamDefault)) + 2 * instanceRamDefault + (long)((DEFAULT_CONTAINER_PADDING / 100.0) * (2 * instanceRamDefault)) + HERON_INTERNAL_CONTAINERS * instanceRamDefault + (long)((DEFAULT_CONTAINER_PADDING / 100.0) * (HERON_INTERNAL_CONTAINERS * instanceRamDefault)) + instanceRamDefault,packingPlan.resource.ram);
  Assert.assertEquals(2 * instanceDiskDefault + (long)((DEFAULT_CONTAINER_PADDING / 100.0) * (2 * instanceDiskDefault)) + 2 * instanceDiskDefault + (long)((DEFAULT_CONTAINER_PADDING / 100.0) * (2 * instanceDiskDefault)) + 2 * instanceDiskDefault + (long)((DEFAULT_CONTAINER_PADDING / 100.0) * (2 * instanceDiskDefault)) + HERON_INTERNAL_CONTAINERS * instanceDiskDefault + (long)((DEFAULT_CONTAINER_PADDING / 100.0) * (HERON_INTERNAL_CONTAINERS * instanceDiskDefault)) + instanceDiskDefault,packingPlan.resource.disk);
}
