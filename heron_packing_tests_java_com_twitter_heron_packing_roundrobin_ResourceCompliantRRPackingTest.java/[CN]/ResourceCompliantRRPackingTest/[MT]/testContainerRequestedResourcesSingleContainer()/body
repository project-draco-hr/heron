{
  int numContainers=1;
  int spoutParallelism=4;
  int boltParallelism=3;
  Integer totalInstances=spoutParallelism + boltParallelism;
  com.twitter.heron.api.Config topologyConfig=new com.twitter.heron.api.Config();
  topologyConfig.put(com.twitter.heron.api.Config.TOPOLOGY_STMGRS,numContainers);
  long containerRam=10L * Constants.GB;
  long containerDisk=20L * Constants.GB;
  float containerCpu=30;
  topologyConfig.setContainerRamRequested(containerRam);
  topologyConfig.setContainerDiskRequested(containerDisk);
  topologyConfig.setContainerCpuRequested(containerCpu);
  TopologyAPI.Topology topologyExplicitResourcesConfig=getTopology(spoutParallelism,boltParallelism,topologyConfig);
  PackingPlan packingPlanExplicitResourcesConfig=getResourceCompliantRRPackingPlan(topologyExplicitResourcesConfig);
  Assert.assertEquals(packingPlanExplicitResourcesConfig.getContainers().size(),numContainers);
  Assert.assertEquals(totalInstances,packingPlanExplicitResourcesConfig.getInstanceCount());
  for (  PackingPlan.ContainerPlan containerPlan : packingPlanExplicitResourcesConfig.getContainers()) {
    Assert.assertEquals(Math.round(PackingUtils.increaseBy(totalInstances * instanceCpuDefault,DEFAULT_CONTAINER_PADDING)),(long)containerPlan.getRequiredResource().getCpu());
    Assert.assertEquals(PackingUtils.increaseBy(totalInstances * instanceRamDefault,DEFAULT_CONTAINER_PADDING),containerPlan.getRequiredResource().getRam());
    Assert.assertEquals(PackingUtils.increaseBy(totalInstances * instanceDiskDefault,DEFAULT_CONTAINER_PADDING),containerPlan.getRequiredResource().getDisk());
    Set<Resource> resources=new HashSet<>();
    for (    PackingPlan.InstancePlan instancePlan : containerPlan.getInstances()) {
      resources.add(instancePlan.getResource());
    }
    Assert.assertEquals(1,resources.size());
    Assert.assertEquals(instanceRamDefault,resources.iterator().next().getRam());
  }
}
