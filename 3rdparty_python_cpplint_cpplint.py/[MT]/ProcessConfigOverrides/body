def ProcessConfigOverrides(filename):
    ' Loads the configuration files and processes the config overrides.\n\n  Args:\n    filename: The name of the file being processed by the linter.\n\n  Returns:\n    False if the current |filename| should not be processed further.\n  '
    abs_filename = os.path.abspath(filename)
    cfg_filters = []
    keep_looking = True
    while keep_looking:
        (abs_path, base_name) = os.path.split(abs_filename)
        if (not base_name):
            break
        cfg_file = os.path.join(abs_path, 'CPPLINT.cfg')
        abs_filename = abs_path
        if (not os.path.isfile(cfg_file)):
            continue
        try:
            with open(cfg_file) as file_handle:
                for line in file_handle:
                    (line, _, _) = line.partition('#')
                    if (not line.strip()):
                        continue
                    (name, _, val) = line.partition('=')
                    name = name.strip()
                    val = val.strip()
                    if (name == 'set noparent'):
                        keep_looking = False
                    elif (name == 'filter'):
                        cfg_filters.append(val)
                    elif (name == 'exclude_files'):
                        if base_name:
                            pattern = re.compile(val)
                            if pattern.match(base_name):
                                sys.stderr.write(('Ignoring "%s": file excluded by "%s". File path component "%s" matches pattern "%s"\n' % (filename, cfg_file, base_name, val)))
                                return False
                    elif (name == 'linelength'):
                        global _line_length
                        try:
                            _line_length = int(val)
                        except ValueError:
                            sys.stderr.write('Line length must be numeric.')
                    else:
                        sys.stderr.write(('Invalid configuration option (%s) in file %s\n' % (name, cfg_file)))
        except IOError:
            sys.stderr.write(("Skipping config file '%s': Can't open for reading\n" % cfg_file))
            keep_looking = False
    for filter in reversed(cfg_filters):
        _AddFilters(filter)
    return True
