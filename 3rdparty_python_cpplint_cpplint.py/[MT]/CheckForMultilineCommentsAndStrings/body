def CheckForMultilineCommentsAndStrings(filename, clean_lines, linenum, error):
    'Logs an error if we see /* ... */ or "..." that extend past one line.\n\n  /* ... */ comments are legit inside macros, for one line.\n  Otherwise, we prefer // comments, so it\'s ok to warn about the\n  other.  Likewise, it\'s ok for strings to extend across multiple\n  lines, as long as a line continuation character (backslash)\n  terminates each line. Although not currently prohibited by the C++\n  style guide, it\'s ugly and unnecessary. We don\'t do well with either\n  in this lint program, so we warn about both.\n\n  Args:\n    filename: The name of the current file.\n    clean_lines: A CleansedLines instance containing the file.\n    linenum: The number of the line to check.\n    error: The function to call with any errors found.\n  '
    line = clean_lines.elided[linenum]
    line = line.replace('\\\\', '')
    if (line.count('/*') > line.count('*/')):
        error(filename, linenum, 'readability/multiline_comment', 5, 'Complex multi-line /*...*/-style comment found. Lint may give bogus warnings.  Consider replacing these with //-style comments, with #if 0...#endif, or with more clearly structured multi-line comments.')
    if ((line.count('"') - line.count('\\"')) % 2):
        error(filename, linenum, 'readability/multiline_string', 5, 'Multi-line string ("...") found.  This lint script doesn\'t do well with such strings, and may give bogus warnings.  Use C++11 raw strings or concatenation instead.')
