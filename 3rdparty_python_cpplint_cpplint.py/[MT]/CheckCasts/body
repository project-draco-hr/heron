def CheckCasts(filename, clean_lines, linenum, error):
    'Various cast related checks.\n\n  Args:\n    filename: The name of the current file.\n    clean_lines: A CleansedLines instance containing the file.\n    linenum: The number of the line to check.\n    error: The function to call with any errors found.\n  '
    line = clean_lines.elided[linenum]
    match = Search('(\\bnew\\s+|\\S<\\s*(?:const\\s+)?)?\\b(int|float|double|bool|char|int32|uint32|int64|uint64)(\\([^)].*)', line)
    expecting_function = ExpectingFunctionArgs(clean_lines, linenum)
    if (match and (not expecting_function)):
        matched_type = match.group(2)
        matched_new_or_template = match.group(1)
        if Match('\\([^()]+\\)\\s*\\[', match.group(3)):
            return
        matched_funcptr = match.group(3)
        if ((matched_new_or_template is None) and (not (matched_funcptr and (Match('\\((?:[^() ]+::\\s*\\*\\s*)?[^() ]+\\)\\s*\\(', matched_funcptr) or matched_funcptr.startswith('(*)')))) and (not Match(('\\s*using\\s+\\S+\\s*=\\s*' + matched_type), line)) and (not Search(('new\\(\\S+\\)\\s*' + matched_type), line))):
            error(filename, linenum, 'readability/casting', 4, ('Using deprecated casting style.  Use static_cast<%s>(...) instead' % matched_type))
    if (not expecting_function):
        CheckCStyleCast(filename, clean_lines, linenum, 'static_cast', '\\((int|float|double|bool|char|u?int(16|32|64))\\)', error)
    if CheckCStyleCast(filename, clean_lines, linenum, 'const_cast', '\\((char\\s?\\*+\\s?)\\)\\s*"', error):
        pass
    else:
        CheckCStyleCast(filename, clean_lines, linenum, 'reinterpret_cast', '\\((\\w+\\s?\\*+\\s?)\\)', error)
    match = Search('(?:[^\\w]&\\(([^)*][^)]*)\\)[\\w(])|(?:[^\\w]&(static|dynamic|down|reinterpret)_cast\\b)', line)
    if match:
        parenthesis_error = False
        match = Match('^(.*&(?:static|dynamic|down|reinterpret)_cast\\b)<', line)
        if match:
            (_, y1, x1) = CloseExpression(clean_lines, linenum, len(match.group(1)))
            if ((x1 >= 0) and (clean_lines.elided[y1][x1] == '(')):
                (_, y2, x2) = CloseExpression(clean_lines, y1, x1)
                if (x2 >= 0):
                    extended_line = clean_lines.elided[y2][x2:]
                    if (y2 < (clean_lines.NumLines() - 1)):
                        extended_line += clean_lines.elided[(y2 + 1)]
                    if Match('\\s*(?:->|\\[)', extended_line):
                        parenthesis_error = True
        if parenthesis_error:
            error(filename, linenum, 'readability/casting', 4, 'Are you taking an address of something dereferenced from a cast?  Wrapping the dereferenced expression in parentheses will make the binding more obvious')
        else:
            error(filename, linenum, 'runtime/casting', 4, 'Are you taking an address of a cast?  This is dangerous: could be a temp var.  Take the address before doing the cast, rather than after')
