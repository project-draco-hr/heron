{
  String statemgrClass=Context.stateManagerClass(config);
  IStateManager statemgr;
  String packingClass=Context.packingClass(config);
  IPacking packing;
  String schedulerClass=Context.schedulerClass(config);
  IScheduler scheduler;
  try {
    statemgr=(IStateManager)Class.forName(statemgrClass).newInstance();
    packing=(IPacking)Class.forName(packingClass).newInstance();
    scheduler=(IScheduler)Class.forName(schedulerClass).newInstance();
  }
 catch (  InstantiationException|IllegalAccessException|ClassNotFoundException e) {
    LOG.log(Level.SEVERE,"Failed to instantiate instances",e);
    return false;
  }
  SchedulerServer server=null;
  boolean isSuccessful=false;
  try {
    statemgr.initialize(config);
    SchedulerStateManagerAdaptor adaptor=new SchedulerStateManagerAdaptor(statemgr,5000);
    Config runtime=Config.newBuilder().put(Keys.topologyId(),topology.getId()).put(Keys.topologyName(),topology.getName()).put(Keys.topologyDefinition(),topology).put(Keys.schedulerStateManagerAdaptor(),adaptor).put(Keys.numContainers(),1 + TopologyUtils.getNumContainers(topology)).build();
    packing.initialize(config,runtime);
    PackingPlan packedPlan=packing.pack();
    Config ytruntime=Config.newBuilder().putAll(runtime).put(Keys.instanceDistribution(),TopologyUtils.packingToString(packedPlan)).put(Keys.schedulerShutdown(),new Shutdown()).build();
    scheduler.initialize(config,ytruntime);
    server=runServer(ytruntime,scheduler,schedulerServerPort);
    isSuccessful=setSchedulerLocation(runtime,server);
    isSuccessful=isSuccessful && scheduler.onSchedule(packedPlan);
    LOG.info("Waiting for termination... ");
    Runtime.schedulerShutdown(ytruntime).await();
  }
 catch (  IOException e) {
    LOG.log(Level.SEVERE,"Failed to start server",e);
    return false;
  }
 finally {
    if (server != null) {
      server.stop();
    }
    scheduler.close();
    packing.close();
    statemgr.close();
  }
  return isSuccessful;
}
