{
  if (helper.isTerminatedComponent()) {
    return null;
  }
  HeronTuples.HeronDataTuple.Builder bldr=HeronTuples.HeronDataTuple.newBuilder();
  bldr.setKey(0);
  List<Integer> customGroupingTargetTaskIds=null;
  if (!helper.isCustomGroupingEmpty()) {
    customGroupingTargetTaskIds=helper.chooseTasksForCustomStreamGrouping(streamId,tuple);
    if (customGroupingTargetTaskIds != null) {
      bldr.addAllDestTaskIds(customGroupingTargetTaskIds);
    }
  }
  helper.getTopologyContext().invokeHookEmit(tuple,streamId,customGroupingTargetTaskIds);
  if (messageId != null) {
    RootTupleInfo tupleInfo=new RootTupleInfo(streamId,messageId);
    if (ackingEnabled) {
      HeronTuples.RootId.Builder rtbldr=EstablishRootId(tupleInfo);
      bldr.addRoots(rtbldr);
    }
 else {
      immediateAcks.offer(tupleInfo);
    }
  }
  long tupleSizeInBytes=0;
  for (  Object obj : tuple) {
    byte[] b=serializer.serialize(obj);
    ByteString bstr=ByteString.copyFrom(b);
    bldr.addValues(bstr);
    tupleSizeInBytes+=b.length;
  }
  outputter.addDataTuple(streamId,bldr,tupleSizeInBytes);
  totalTuplesEmitted++;
  spoutMetrics.emittedTuple(streamId);
  return null;
}
