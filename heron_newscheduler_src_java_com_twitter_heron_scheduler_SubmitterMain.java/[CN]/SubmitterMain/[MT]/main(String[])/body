{
  Options options=constructOptions();
  Options helpOptions=constructHelpOptions();
  CommandLineParser parser=new DefaultParser();
  CommandLine cmd=parser.parse(helpOptions,args,true);
  ;
  if (cmd.hasOption("h")) {
    usage(options);
    return;
  }
  try {
    cmd=parser.parse(options,args);
  }
 catch (  ParseException e) {
    LOG.severe("Error parsing command line options: " + e.getMessage());
    usage(options);
    System.exit(1);
  }
  String cluster=cmd.getOptionValue("cluster");
  ;
  String role=cmd.getOptionValue("role");
  ;
  String environ=cmd.getOptionValue("environment");
  ;
  String heronHome=cmd.getOptionValue("heron_home");
  ;
  String configPath=cmd.getOptionValue("config_path");
  ;
  String configOverrideEncoded=cmd.getOptionValue("config_overrides");
  ;
  String topologyPackage=cmd.getOptionValue("topology_package");
  ;
  String topologyDefnFile=cmd.getOptionValue("topology_defn");
  ;
  String topologyJarFile=cmd.getOptionValue("topology_jar");
  ;
  TopologyAPI.Topology topology=TopologyUtils.getTopology(topologyDefnFile);
  Config config=Config.expand(Config.newBuilder().putAll(defaultConfigs(heronHome,configPath)).putAll(commandLineConfigs(cluster,role,environ)).putAll(topologyConfigs(topologyPackage,topologyJarFile,topologyDefnFile,topology)).build());
  LOG.info("Static config loaded successfully ");
  LOG.info(config.toString());
  String statemgrClass=Context.stateManagerClass(config);
  IStateManager statemgr=(IStateManager)Class.forName(statemgrClass).newInstance();
  String launcherClass=Context.launcherClass(config);
  ILauncher launcher=(ILauncher)Class.forName(launcherClass).newInstance();
  String packingClass=Context.packingClass(config);
  IPacking packing=(IPacking)Class.forName(packingClass).newInstance();
  String topologyName=topology.getName();
  boolean isSuccessful=false;
  UploadRunner uploadRunner=null;
  try {
    statemgr.initialize(config);
    uploadRunner=new UploadRunner(config);
    boolean isValid=validateSubmit(statemgr,topologyName);
    if (isValid) {
      LOG.log(Level.INFO,"Topology {0} to be submitted",topologyName);
      isSuccessful=submitTopology(config,topology,statemgr,launcher,packing,uploadRunner);
    }
  }
  finally {
    statemgr.close();
    if (!isSuccessful) {
      if (uploadRunner != null) {
        uploadRunner.undo();
      }
      launcher.undo();
    }
  }
  if (!isSuccessful) {
    LOG.log(Level.SEVERE,"Failed to submit topology {0}. Exiting",topologyName);
    System.exit(1);
  }
 else {
    LOG.log(Level.INFO,"Topology {0} submitted successfully",topologyName);
    System.exit(0);
  }
}
