def monitor(self):
    '\n    Monitor the rootpath and call the callback\n    corresponding to the change.\n    This monitoring happens periodically. This function\n    is called in a seperate thread from the main thread,\n    because it sleeps for the intervals between each poll.\n    '

    def trigger_watches_based_on_files(watchers, path, directory, ProtoClass):
        '\n      For all the topologies in the watchers, check if the data\n      in directory has changed. Trigger the callback if it has.\n      '
        for (topology, callbacks) in watchers.iteritems():
            file_path = os.path.join(path, topology)
            data = ''
            if os.path.exists(file_path):
                with open(os.path.join(path, topology)) as f:
                    data = f.read()
            if ((topology not in directory) or (data != directory[topology])):
                proto_object = ProtoClass()
                proto_object.ParseFromString(data)
                for callback in callbacks:
                    callback(proto_object)
                directory[topology] = data
    while (not self.monitoring_thread_stop_signal):
        topologies_path = self.get_topologies_path()
        topologies = filter((lambda f: os.path.isfile(os.path.join(topologies_path, f))), os.listdir(topologies_path))
        if (set(topologies) != set(self.topologies_directory)):
            for callback in self.topologies_watchers:
                callback(topologies)
        self.topologies_directory = topologies
        trigger_watches_based_on_files(self.topology_watchers, topologies_path, self.topologies_directory, Topology)
        execution_state_path = os.path.dirname(self.get_execution_state_path(''))
        trigger_watches_based_on_files(self.execution_state_watchers, execution_state_path, self.execution_state_directory, ExecutionState)
        pplan_path = os.path.dirname(self.get_pplan_path(''))
        trigger_watches_based_on_files(self.pplan_watchers, pplan_path, self.pplan_directory, PhysicalPlan)
        tmaster_path = os.path.dirname(self.get_tmaster_path(''))
        trigger_watches_based_on_files(self.tmaster_watchers, tmaster_path, self.tmaster_directory, TMasterLocation)
        time.sleep(5)
