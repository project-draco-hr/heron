{
  File schedulerConfFile=Paths.get(configPath,AURORA_SCHEDULER_CONF).toFile();
  File bindConfFile=Paths.get(configPath,AURORA_BIND_CONF).toFile();
  String[] parts=configOverride.trim().split("\\s+",2);
  if (parts.length == 0) {
    LOG.severe("dc/role/environ is required.");
    return false;
  }
  String clusterInfo=parts[0];
  String[] clusterParts=clusterInfo.split("/");
  if (clusterParts.length != 3) {
    LOG.severe("Cluster parts must be dc/role/environ (without spaces)");
    return false;
  }
  String propertyOverride="";
  if (parts.length == 2) {
    propertyOverride=parts[1];
  }
  String dc=clusterParts[0];
  String role=clusterParts[1];
  String environ=clusterParts[2];
  PropertiesFileConfigLoader baseLoader=new PropertiesFileConfigLoader();
  if (baseLoader.load(schedulerConfFile.toString(),propertyOverride)) {
    Properties baseProperties=baseLoader.getProperties();
    Properties bindProperties=new Properties();
    if (ConfigLoaderUtils.loadPropertiesFile(baseProperties,getClusterConfFile(configPath,dc).toString()) && ConfigLoaderUtils.applyConfigPropertyOverride(baseProperties) && ConfigLoaderUtils.loadPropertiesFile(bindProperties,bindConfFile.toString())&& addAuroraBindProperties(baseProperties,bindProperties)) {
      properties.putAll(baseProperties);
      addClusterInfoProperties(dc,role,environ);
      return true;
    }
  }
  return false;
}
