{
  Config config=Mockito.mock(Config.class);
  Mockito.when(config.getStringValue(ConfigKeys.get("STATE_MANAGER_CLASS"))).thenReturn(STATE_MANAGER_CLASS);
  Mockito.when(config.getStringValue(ConfigKeys.get("PACKING_CLASS"))).thenReturn(PACKING_CLASS);
  Mockito.when(config.getStringValue(ConfigKeys.get("SCHEDULER_CLASS"))).thenReturn(SCHEDULER_CLASS);
  String iTopologyName="topologyName";
  int iSchedulerServerPort=0;
  TopologyAPI.Topology topology=TopologyTests.createTopology(iTopologyName,new com.twitter.heron.api.Config(),new HashMap<String,Integer>(),new HashMap<String,Integer>());
  String packingString="dummyPackingString";
  stateManager=Mockito.mock(IStateManager.class);
  packing=Mockito.mock(IPacking.class);
  scheduler=Mockito.mock(IScheduler.class);
  PackingPlan packingPlan=Mockito.mock(PackingPlan.class);
  Mockito.when(packing.pack()).thenReturn(packingPlan);
  Mockito.when(packingPlan.getInstanceDistribution()).thenReturn(packingString);
  Map<String,PackingPlan.ContainerPlan> containers=new HashMap<>();
  containers.put("dummy",new PackingPlan.ContainerPlan("dummy",null,new PackingPlan.Resource(1,1,1)));
  Mockito.when(packingPlan.getContainers()).thenReturn(containers);
  PowerMockito.spy(ReflectionUtils.class);
  PowerMockito.doReturn(stateManager).when(ReflectionUtils.class,"newInstance",STATE_MANAGER_CLASS);
  PowerMockito.doReturn(packing).when(ReflectionUtils.class,"newInstance",PACKING_CLASS);
  PowerMockito.doReturn(scheduler).when(ReflectionUtils.class,"newInstance",SCHEDULER_CLASS);
  schedulerMain=Mockito.spy(new SchedulerMain(config,topology,iSchedulerServerPort,Mockito.mock(Properties.class)));
  schedulerServer=Mockito.mock(SchedulerServer.class);
  Mockito.doReturn(schedulerServer).when(schedulerMain).getServer(Mockito.any(Config.class),Mockito.eq(scheduler),Mockito.eq(iSchedulerServerPort));
  Mockito.doReturn(true).when(scheduler).onSchedule(Mockito.any(PackingPlan.class));
  PowerMockito.spy(SchedulerUtils.class);
  PowerMockito.doReturn(true).when(SchedulerUtils.class,"setSchedulerLocation",Mockito.any(Config.class),Mockito.anyString(),Mockito.eq(scheduler));
  Shutdown shutdown=Mockito.mock(Shutdown.class);
  Mockito.doReturn(shutdown).when(schedulerMain).getShutdown();
}
