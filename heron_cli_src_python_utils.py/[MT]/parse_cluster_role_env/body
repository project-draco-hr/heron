def parse_cluster_role_env(cluster_role_env, config_path):
    parts = cluster_role_env.split('/')[:3]
    if (len(parts) < 3):
        cli_conf_file = os.path.join(config_path, CLIENT_YAML)
        if (not os.path.isfile(cli_conf_file)):
            if (len(parts) == 1):
                parts.append(getpass.getuser())
            if (len(parts) == 2):
                parts.append(ENVIRON)
        else:
            with open(cli_conf_file, 'r') as conf_file:
                cli_confs = yaml.load(conf_file)
                if (len(parts) == 1):
                    if ((ROLE_REQUIRED in cli_confs) and (cli_confs[ROLE_REQUIRED] == True)):
                        raise Exception('role required but not provided')
                    else:
                        parts.append(getpass.getuser())
                if (len(parts) == 2):
                    if ((ENV_REQUIRED in cli_confs) and (cli_confs[ENV_REQUIRED] == True)):
                        raise Exception('environ required but not provided')
                    else:
                        parts.append(ENVIRON)
    if ((len(parts[0]) == 0) or (len(parts[1]) == 0) or (len(parts[2]) == 0)):
        print ('Failed to parse %s: %s' % (argstr, namespace[argstr]))
        sys.exit(1)
    return (parts[0], parts[1], parts[2])
