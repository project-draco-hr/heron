{
  Metrics.MetricPublisher publisher=request.getPublisher();
  LOG.log(Level.SEVERE,"Got a new register publisher from hostname: {0}," + " component_name: {1}, port: {2}, instance_id: {3}, instance_index: {4} from {5}",new Object[]{publisher.getHostname(),publisher.getComponentName(),publisher.getPort(),publisher.getInstanceId(),publisher.getInstanceIndex(),channel.socket().getRemoteSocketAddress()});
  Common.StatusCode responseStatusCode=Common.StatusCode.NOTOK;
  if (publisherMap.containsKey(channel.socket().getRemoteSocketAddress())) {
    LOG.log(Level.SEVERE,"Metrics publisher already exists for hostname: {0}," + " component_name: {1}, port: {2}, instance_id: {3}, instance_index: {4}",new Object[]{publisher.getHostname(),publisher.getComponentName(),publisher.getPort(),publisher.getInstanceId(),publisher.getInstanceIndex()});
  }
 else {
    publisherMap.put(channel.socket().getRemoteSocketAddress(),publisher);
    responseStatusCode=Common.StatusCode.OK;
  }
  Common.Status responseStatus=Common.Status.newBuilder().setStatus(responseStatusCode).build();
  Metrics.MetricPublisherRegisterResponse response=Metrics.MetricPublisherRegisterResponse.newBuilder().setStatus(responseStatus).build();
  sendResponse(rid,channel,response);
  serverMetricsCounters.scope(SERVER_NEW_REGISTER).incr();
}
