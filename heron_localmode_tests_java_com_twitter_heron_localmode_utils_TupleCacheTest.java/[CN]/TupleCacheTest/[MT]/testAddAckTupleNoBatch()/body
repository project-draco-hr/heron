{
  for (int i=0; i < N * REPEAT; i++) {
    tupleCache.addAckTuple(destTaskIds.get(i % destTaskIds.size()),ackTuple);
  }
  for (int i=0; i < N * REPEAT; i++) {
    tupleCache.addFailTuple(destTaskIds.get(i % destTaskIds.size()),ackTuple);
  }
  for (int i=0; i < N * REPEAT; i++) {
    tupleCache.addEmitTuple(destTaskIds.get(i % destTaskIds.size()),ackTuple);
  }
  Map<Integer,List<HeronTuples.HeronTupleSet>> cache=tupleCache.getCache();
  Assert.assertEquals(N,cache.size());
  Assert.assertEquals(new HashSet<>(destTaskIds),cache.keySet());
  for (  List<HeronTuples.HeronTupleSet> tuples : cache.values()) {
    Assert.assertEquals(3,tuples.size());
  }
}
