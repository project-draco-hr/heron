{
  List<Integer> taskIds=new LinkedList<>();
  for (int i=0; i < 100; i++) {
    taskIds.add(i);
  }
  TopologyAPI.StreamSchema.KeyType kt=TopologyAPI.StreamSchema.KeyType.newBuilder().setType(TopologyAPI.Type.OBJECT).setKey("field1").build();
  TopologyAPI.StreamSchema s=TopologyAPI.StreamSchema.newBuilder().addKeys(kt).build();
  TopologyAPI.InputStream is=TopologyAPI.InputStream.newBuilder().setGroupingFields(s).setGtype(TopologyAPI.Grouping.FIELDS).setStream(TopologyAPI.StreamId.newBuilder().setComponentName("componentName").setId("id")).build();
  TopologyAPI.StreamSchema.KeyType kt1=TopologyAPI.StreamSchema.KeyType.newBuilder().setType(TopologyAPI.Type.OBJECT).setKey("field1").build();
  TopologyAPI.StreamSchema.KeyType kt2=TopologyAPI.StreamSchema.KeyType.newBuilder().setType(TopologyAPI.Type.OBJECT).setKey("field2").build();
  TopologyAPI.StreamSchema schema=TopologyAPI.StreamSchema.newBuilder().addKeys(kt1).addKeys(kt2).build();
  FieldsGrouping g=new FieldsGrouping(is,schema,taskIds);
  Set<Integer> allDests=new HashSet<>();
  for (int i=0; i < 1000; i++) {
    HeronTuples.HeronDataTuple tuple=HeronTuples.HeronDataTuple.newBuilder().setKey(-1).addValues(ByteString.copyFromUtf8("this matters")).addValues(ByteString.copyFromUtf8("this doesnt " + i)).build();
    List<Integer> dests=g.getListToSend(tuple);
    Assert.assertEquals(1,dests.size());
    allDests.add(dests.get(0));
  }
  Assert.assertEquals(1,allDests.size());
  allDests.clear();
  for (int i=0; i < 1000 * 1000; i++) {
    HeronTuples.HeronDataTuple tuple=HeronTuples.HeronDataTuple.newBuilder().setKey(-1).addValues(ByteString.copyFromUtf8("this changes " + i)).addValues(ByteString.copyFromUtf8("this doesnt ")).build();
    List<Integer> dests=g.getListToSend(tuple);
    Assert.assertEquals(1,dests.size());
    allDests.add(dests.get(0));
  }
  Assert.assertEquals(taskIds.size(),allDests.size());
}
