{
  List<Integer> taskIds=new LinkedList<>();
  taskIds.add(2);
  taskIds.add(4);
  taskIds.add(6);
  taskIds.add(8);
  TopologyAPI.StreamSchema.KeyType kt=TopologyAPI.StreamSchema.KeyType.newBuilder().setType(TopologyAPI.Type.OBJECT).setKey("field1").build();
  TopologyAPI.StreamSchema schema=TopologyAPI.StreamSchema.newBuilder().addKeys(kt).build();
  TopologyAPI.InputStream is=TopologyAPI.InputStream.newBuilder().setGroupingFields(schema).setGtype(TopologyAPI.Grouping.FIELDS).setStream(TopologyAPI.StreamId.newBuilder().setComponentName("componentName").setId("id")).build();
  FieldsGrouping g=new FieldsGrouping(is,schema,taskIds);
  HeronTuples.HeronDataTuple tuple=HeronTuples.HeronDataTuple.newBuilder().setKey(-1).addValues(ByteString.copyFromUtf8("")).build();
  Set<Integer> allDests=new HashSet<>();
  for (int i=0; i < 1000; i++) {
    List<Integer> dests=g.getListToSend(tuple);
    Assert.assertEquals(1,dests.size());
    allDests.add(dests.get(0));
  }
  Assert.assertEquals(1,allDests.size());
  Assert.assertTrue(taskIds.contains(new ArrayList<>(allDests).get(0)));
}
