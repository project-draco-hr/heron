@tornado.gen.coroutine
def getComponentException(self, tmaster, component_name, instances=[], callback=None):
    "\n    Get all (last 1000) exceptions for 'component_name' of the topology.\n    Returns an Array of exception logs on success.\n    Returns json with message on failure.\n    "
    if ((not tmaster) or (not tmaster.host) or (not tmaster.stats_port)):
        return
    exception_request = tmaster_pb2.ExceptionLogRequest()
    exception_request.component_name = component_name
    if (len(instances) > 0):
        exception_request.instances.extend(instances)
    request_str = exception_request.SerializeToString()
    port = str(tmaster.stats_port)
    host = tmaster.host
    url = 'http://{0}:{1}/exceptions'.format(host, port)
    request = tornado.httpclient.HTTPRequest(url, body=request_str, method='POST', request_timeout=5)
    LOG.debug(('Making HTTP call to fetch exceptions url: %s' % url))
    try:
        client = tornado.httpclient.AsyncHTTPClient()
        result = yield client.fetch(request)
        LOG.debug('HTTP call complete.')
    except tornado.httpclient.HTTPError as e:
        raise Exception(str(e))
    responseCode = result.code
    print responseCode
    if (responseCode >= 400):
        message = ('Error in getting exceptions from Tmaster, code: ' + responseCode)
        LOG.error(message)
        raise tornado.gen.Return({'message': message, })
    exception_response = tmaster_pb2.ExceptionLogResponse()
    exception_response.ParseFromString(result.body)
    if (exception_response.status.status == common_pb2.NOTOK):
        if exception_response.status.HasField('message'):
            raise tornado.gen.Return({'message': exception_response.status.message, })
    ret = []
    for exception_log in exception_response.exceptions:
        ret.append({'hostname': exception_log.hostname, 'instance_id': exception_log.instance_id, 'stack_trace': exception_log.stacktrace, 'lasttime': exception_log.lasttime, 'firsttime': exception_log.firsttime, 'count': str(exception_log.count), 'logging': exception_log.logging, })
    raise tornado.gen.Return(ret)
