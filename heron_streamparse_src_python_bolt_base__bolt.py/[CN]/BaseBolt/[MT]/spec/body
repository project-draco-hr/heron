@classmethod
def spec(cls, name=None, inputs=None, par=1, config=None):
    'Register this bolt to the topology and create ``HeronComponentSpec``\n\n    The usage of this method is compatible with StreamParse API, although it does not create\n    ``ShellBoltSpec`` but instead directly registers to a ``Topology`` class.\n\n    This method does not take a ``outputs`` argument because ``outputs`` should be\n    an attribute of your ``Spout`` subclass. Also, some ways of declaring inputs is not supported\n    in this implementation; please read the documentation below.\n\n    :type name: str\n    :param name: Name of this bolt.\n    :param inputs: Streams that feed into this Bolt.\n\n                   Two forms of this are acceptable:\n\n                   1. A `dict` mapping from ``HeronComponentSpec`` to ``Grouping``.\n                      In this case, default stream is used.\n                   2. A `dict` mapping from ``GlobalStreamId`` to ``Grouping``.\n                      This ``GlobalStreamId`` object itself is different from StreamParse, because\n                      Heron does not use thrift, although its constructor method is compatible.\n                   3. A `list` of ``HeronComponentSpec``. In this case, default stream with\n                      SHUFFLE grouping is used.\n                   4. A `list` of ``GlobalStreamId``. In this case, SHUFFLE grouping is used.\n    :type par: int\n    :param par: Parallelism hint for this spout.\n    :type config: dict\n    :param config: Component-specific config settings.\n    '
    python_class_path = ('%s.%s' % (cls.__module__, cls.__name__))
    if hasattr(cls, 'outputs'):
        _outputs = cls.outputs
    else:
        _outputs = None
    return HeronComponentSpec(name, python_class_path, is_spout=False, par=par, inputs=inputs, outputs=_outputs, config=config)
