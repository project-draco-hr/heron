{
  HttpServiceSchedulerClient client=Mockito.spy(new HttpServiceSchedulerClient(config,runtime,SCHEDULER_HTTP_ENDPOINT));
  Mockito.doReturn(null).when(client).createHttpConnection(Mockito.any(Command.class));
  Assert.assertFalse(client.requestSchedulerService(Mockito.any(Command.class),Mockito.any(byte[].class)));
  HttpURLConnection connection=Mockito.mock(HttpURLConnection.class);
  Mockito.doReturn(connection).when(client).createHttpConnection(Mockito.any(Command.class));
  PowerMockito.spy(NetworkUtils.class);
  PowerMockito.doReturn(false).when(NetworkUtils.class,"sendHttpPostRequest",Mockito.eq(connection),Mockito.any(byte[].class));
  Assert.assertFalse(client.requestSchedulerService(Mockito.any(Command.class),Mockito.any(byte[].class)));
  Mockito.verify(connection).disconnect();
  PowerMockito.doReturn(true).when(NetworkUtils.class,"sendHttpPostRequest",Mockito.eq(connection),Mockito.any(byte[].class));
  Scheduler.SchedulerResponse notOKResponse=SchedulerUtils.constructSchedulerResponse(false);
  PowerMockito.doReturn(notOKResponse.toByteArray()).when(NetworkUtils.class,"readHttpResponse",Mockito.eq(connection));
  Assert.assertFalse(client.requestSchedulerService(Mockito.any(Command.class),Mockito.any(byte[].class)));
  Mockito.verify(connection,Mockito.times(2)).disconnect();
  Scheduler.SchedulerResponse oKResponse=SchedulerUtils.constructSchedulerResponse(true);
  PowerMockito.doReturn(oKResponse.toByteArray()).when(NetworkUtils.class,"readHttpResponse",Mockito.eq(connection));
  Assert.assertTrue(client.requestSchedulerService(Mockito.any(Command.class),Mockito.any(byte[].class)));
  Mockito.verify(connection,Mockito.times(3)).disconnect();
}
