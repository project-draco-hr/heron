{
  final String JAVA_HOME="java_home";
  final String NATIVE_LIBRARY_PATH="native_library_path";
  final URI mockURI=TypeUtils.getURI("file:///mock/uri");
  Config config=Mockito.mock(Config.class);
  Mockito.when(config.getStringValue(MesosContext.SCHEDULER_WORKING_DIRECTORY)).thenReturn("working-dir");
  Mockito.when(config.getStringValue(MesosContext.HERON_MESOS_NATIVE_LIBRARY_PATH)).thenReturn(NATIVE_LIBRARY_PATH);
  Mockito.when(config.getStringValue(ConfigKeys.get("JAVA_HOME"))).thenReturn(JAVA_HOME);
  Config runtime=Mockito.mock(Config.class);
  Mockito.when(runtime.get(Keys.topologyPackageUri())).thenReturn(mockURI);
  MesosLauncher launcher=Mockito.spy(MesosLauncher.class);
  String[] mockCommand=new String[]{"mock","scheduler","command"};
  Mockito.doReturn(mockCommand).when(launcher).schedulerCommandArgs(Mockito.anyList());
  launcher.initialize(config,runtime);
  String[] command=launcher.getSchedulerCommand();
  Assert.assertEquals(String.format("%s/bin/java",JAVA_HOME),command[0]);
  Assert.assertEquals(String.format("-Djava.library.path=%s",NATIVE_LIBRARY_PATH),command[1]);
  Assert.assertEquals("-cp",command[2]);
  Assert.assertEquals(String.format("-Pheron.package.topology.uri=%s",mockURI.toString()),command[5]);
  Assert.assertEquals(mockCommand[0],command[6]);
  Assert.assertEquals(mockCommand[1],command[7]);
  Assert.assertEquals(mockCommand[2],command[8]);
}
