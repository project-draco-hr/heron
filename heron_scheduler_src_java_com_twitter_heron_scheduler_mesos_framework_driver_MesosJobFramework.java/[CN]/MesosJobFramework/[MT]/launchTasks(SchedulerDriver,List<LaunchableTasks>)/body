{
  Map<Protos.Offer,List<LaunchableTasks>> tasksGroupByOffer=new HashMap<>();
  for (  LaunchableTasks task : tasks) {
    List<LaunchableTasks> subTasks=tasksGroupByOffer.get(task.offer);
    if (subTasks == null) {
      subTasks=new LinkedList<>();
    }
    subTasks.add(task);
    tasksGroupByOffer.put(task.offer,subTasks);
  }
  for (  Map.Entry<Protos.Offer,List<LaunchableTasks>> kv : tasksGroupByOffer.entrySet()) {
    Protos.Offer offer=kv.getKey();
    List<LaunchableTasks> subTasks=kv.getValue();
    List<Protos.TaskInfo> mesosTasks=new LinkedList<>();
    for (    LaunchableTasks task : subTasks) {
      Protos.TaskInfo.Builder mesosTask=taskBuilder.getMesosTaskInfoBuilder(task.taskId,task.baseJob,task.offer).addResources(taskBuilder.rangeResource(MesosTaskBuilder.portResourceName,task.portRangeStart,task.portRangeEnd,offer)).setSlaveId(task.offer.getSlaveId());
      String convertedCommand=allocatePortsInCommand(task.baseJob.command,task.portRangeStart,task.portRangeEnd);
      mesosTask.setCommand(mesosTask.getCommandBuilder().setValue(convertedCommand));
      mesosTasks.add(mesosTask.build());
    }
    for (    LaunchableTasks task : tasks) {
      BaseTask taskToPersist=new BaseTask(task.taskId,task.offer.getSlaveId().getValue(),BaseTask.TaskState.SCHEDULED);
      LOG.info(String.format("Ready to launch task %s. WAL",task.taskId));
      updateTrackingTask(task.baseJob.name,taskToPersist);
    }
    LOG.info("Launching tasks from offer: " + offer + " with tasks: "+ mesosTasks);
    Protos.Status status=driver.launchTasks(Arrays.asList(new Protos.OfferID[]{offer.getId()}),mesosTasks);
    if (status == Protos.Status.DRIVER_RUNNING) {
      LOG.info(String.format("Tasks launched, status: '%s'",status));
    }
 else {
      LOG.info("Other status returned: " + status);
    }
  }
}
