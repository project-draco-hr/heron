{
  topologyName=Context.topologyName(config);
  topologyJar=Context.topologyBinaryFile(config);
  topologyPackageLocation=Context.topologyPackageFile(config);
  cluster=Context.cluster(config);
  role=Context.role(config);
  env=Context.environ(config);
  queue=YarnContext.heronYarnQueue(config);
  driverMemory=YarnContext.heronDriverMemoryMb(config);
  try {
    Class<?> packingClass=Class.forName(Context.packingClass(config));
    Class<?> stateMgrClass=Class.forName(Context.stateManagerClass(config));
    libJars.add(this.getClass().getProtectionDomain().getCodeSource().getLocation().getFile());
    libJars.add(packingClass.getProtectionDomain().getCodeSource().getLocation().getFile());
    libJars.add(stateMgrClass.getProtectionDomain().getCodeSource().getLocation().getFile());
    coreReleasePackage=new URI(Context.corePackageUri(config)).getPath();
  }
 catch (  URISyntaxException|ClassNotFoundException e) {
    throw new RuntimeException("Core package URI is OR packing/state manager is missing",e);
  }
  LOG.log(Level.INFO,"Initializing topology: {0}, core: {1}",new Object[]{topologyName,coreReleasePackage});
}
