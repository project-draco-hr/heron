{
  LOG.info("Launching topology in aurora");
  TopologyAPI.Topology topology=Runtime.topology(runtime);
  if (packing == null || packing.containers.isEmpty()) {
    LOG.severe("No container requested. Can't schedule");
    return false;
  }
  PackingPlan.Resource containerResource=packing.containers.values().iterator().next().resource;
  Map<String,String> auroraProperties=new HashMap<>();
  addAuroraProperties(auroraProperties,topology,containerResource,packing);
  String completeSchedulerClassPath=new StringBuilder().append(Context.schedulerSandboxClassPath(config)).append(":").append(Context.packingSandboxClassPath(config)).append(":").append(Context.stateManagerSandboxClassPath(config)).toString();
  auroraProperties.put("SANDBOX_SCHEDULER_CLASSPATH",completeSchedulerClassPath);
  String heronCoreReleasePkgURI=Context.corePackageUri(config);
  String topologyPkgURI=Runtime.topologyPackageUri(runtime).toString();
  auroraProperties.put("CORE_PACKAGE_URI",heronCoreReleasePkgURI);
  auroraProperties.put("TOPOLOGY_PACKAGE_URI",topologyPkgURI);
  return AuroraUtils.createAuroraJob(topology.getName(),Context.cluster(config),Context.role(config),Context.environ(config),getHeronAuroraPath(),auroraProperties,true);
}
