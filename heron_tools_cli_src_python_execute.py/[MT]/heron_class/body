def heron_class(class_name, lib_jars, extra_jars=None, args=None, java_defines=None):
    '\n  Execute a heron class given the args and the jars needed for class path\n  :param class_name:\n  :param lib_jars:\n  :param extra_jars:\n  :param args:\n  :param java_defines:\n  :return:\n  '
    if (extra_jars is None):
        extra_jars = []
    if (args is None):
        args = []
    if (java_defines is None):
        java_defines = []
    java_opts = [('-D' + opt) for opt in java_defines]
    all_args = (([config.get_java_path(), '-client', '-Xmx1g'] + java_opts) + ['-cp', config.get_classpath((lib_jars + extra_jars))])
    all_args += ([class_name] + list(args))
    heron_env = os.environ.copy()
    heron_env['HERON_OPTIONS'] = opts.get_heron_config()
    Log.debug(('$> %s' % ' '.join(all_args)))
    Log.debug(('Heron options: %s' % str(heron_env['HERON_OPTIONS'])))
    status = subprocess.call(all_args, env=heron_env)
    if (status != 0):
        err_str = ('User main failed with status %d. Bailing out...' % status)
        raise RuntimeError(err_str)
