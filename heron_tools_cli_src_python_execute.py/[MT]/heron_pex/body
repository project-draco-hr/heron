def heron_pex(topology_pex, topology_class_name, args=None):
    Log.debug(('Importing %s from %s' % (topology_class_name, topology_pex)))
    if (topology_class_name == '-'):
        heron_env = os.environ.copy()
        heron_env['HERON_OPTIONS'] = opts.get_heron_config()
        cmd = [topology_pex]
        if (args is not None):
            cmd.extend(args)
        Log.debug(('$> %s' % ' '.join(cmd)))
        Log.debug(('Heron options: %s' % str(heron_env['HERON_OPTIONS'])))
        status = subprocess.call(cmd, env=heron_env)
        if (status != 0):
            err_str = ('Topology failed to be loaded from the given pex, with status: %d. Bailing out...' % status)
            raise RuntimeError(err_str)
    else:
        try:
            Log.debug(('args: %s' % args))
            if ((args is not None) and isinstance(args, (list, tuple)) and (len(args) > 0)):
                opts.set_config('cmdline.topology.name', args[0])
            os.environ['HERON_OPTIONS'] = opts.get_heron_config()
            Log.debug(('Heron options: %s' % os.environ['HERON_OPTIONS']))
            pex_loader.load_pex(topology_pex)
            topology_class = pex_loader.import_and_get_class(topology_pex, topology_class_name)
            topology_class.write()
        except Exception:
            Log.debug(traceback.format_exc())
            err_str = 'Topology failed to be loaded from the given pex. Bailing out...'
            raise RuntimeError(err_str)
