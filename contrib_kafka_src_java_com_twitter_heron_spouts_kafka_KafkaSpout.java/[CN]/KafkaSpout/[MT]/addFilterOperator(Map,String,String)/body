{
  if (conf.containsKey(SpoutConfig.TOPOLOGY_FILTER_CONFIG)) {
    JSONArray jsons=(JSONArray)JSONValue.parse(conf.get(SpoutConfig.TOPOLOGY_FILTER_CONFIG).toString());
    for (    Object jsonObj : jsons) {
      JSONObject json=(JSONObject)jsonObj;
      String filterFor=json.get("spoutname").toString();
      String topicForFilter="";
      if (json.get("topic") != null) {
        topicForFilter=json.get("topic").toString();
      }
      if (filterFor.equals(spoutName) || topic.equals(topicForFilter)) {
        try {
          String parameter=json.get("parameter").toString();
          String classname=json.get("classname").toString();
          LOG.info("Initializing class " + classname + " with parameter "+ parameter);
          Constructor<?> cons=Class.forName(classname).getConstructor(String.class);
          spoutConfig.filterOperator=(FilterOperator)cons.newInstance(parameter);
        }
 catch (        Exception e) {
          LOG.error("Failed to instantiate filter operator. ",e);
          throw new RuntimeException("Failed to instantiate filter operator.");
        }
      }
 else {
        LOG.info("Not applying filter for spout = " + spoutName + " topic = "+ topic);
      }
    }
  }
}
