{
  Mockito.when(runtime.getLongValue(Keys.numContainers())).thenReturn(2L);
  scheduler.initialize(config,runtime);
  Mockito.doNothing().when(scheduler).startExecutorMonitor(Mockito.anyInt(),Mockito.any(Process.class));
  Process mockProcessTM=Mockito.mock(Process.class);
  Mockito.doReturn(mockProcessTM).when(scheduler).startExecutorProcess(0);
  Process mockProcessWorker1=Mockito.mock(Process.class);
  Mockito.doReturn(mockProcessWorker1).when(scheduler).startExecutorProcess(1);
  PackingPlan packingPlan=Mockito.mock(PackingPlan.class);
  Set<PackingPlan.ContainerPlan> containers=new HashSet<>();
  containers.add(PackingTestUtils.testContainerPlan(1));
  Mockito.when(packingPlan.getContainers()).thenReturn(containers);
  Assert.assertTrue(scheduler.onSchedule(packingPlan));
  Mockito.verify(scheduler,Mockito.times(2)).startExecutor(Mockito.anyInt());
  Process mockProcessWorker2=Mockito.mock(Process.class);
  Mockito.doReturn(mockProcessWorker2).when(scheduler).startExecutorProcess(3);
  containers.clear();
  containers.add(PackingTestUtils.testContainerPlan(3));
  scheduler.addContainers(containers);
  Mockito.verify(scheduler).startExecutor(3);
  Process mockProcess=Mockito.mock(Process.class);
  Mockito.doReturn(mockProcess).when(scheduler).startExecutorProcess(Mockito.anyInt());
  containers.clear();
  containers.add(PackingTestUtils.testContainerPlan(4));
  containers.add(PackingTestUtils.testContainerPlan(5));
  scheduler.addContainers(containers);
  Mockito.verify(scheduler).startExecutor(4);
  Mockito.verify(scheduler).startExecutor(5);
}
