{
  boolean isVerbose=true;
  PowerMockito.mockStatic(FileUtils.class);
  PowerMockito.when(FileUtils.isDirectoryExists(Mockito.anyString())).thenReturn(false);
  PowerMockito.when(FileUtils.createDirectory(Mockito.anyString())).thenReturn(false);
  Assert.assertFalse(SchedulerUtils.setupWorkingDirectory(WORKING_DIR,CORE_RELEASE_URI,CORE_RELEASE_DEST,TOPOLOGY_URI,TOPOLOGY_DEST,isVerbose));
  PowerMockito.when(FileUtils.createDirectory(Mockito.anyString())).thenReturn(true);
  PowerMockito.spy(SchedulerUtils.class);
  PowerMockito.doReturn(true).when(SchedulerUtils.class,"curlAndExtractPackage",Mockito.eq(WORKING_DIR),Mockito.eq(CORE_RELEASE_URI),Mockito.eq(CORE_RELEASE_DEST),Mockito.eq(true),Mockito.eq(isVerbose));
  PowerMockito.doReturn(false).when(SchedulerUtils.class,"curlAndExtractPackage",Mockito.eq(WORKING_DIR),Mockito.eq(TOPOLOGY_URI),Mockito.eq(TOPOLOGY_DEST),Mockito.anyBoolean(),Mockito.anyBoolean());
  Assert.assertFalse(SchedulerUtils.setupWorkingDirectory(WORKING_DIR,CORE_RELEASE_URI,CORE_RELEASE_DEST,TOPOLOGY_URI,TOPOLOGY_DEST,isVerbose));
  PowerMockito.doReturn(true).when(SchedulerUtils.class,"curlAndExtractPackage",Mockito.eq(WORKING_DIR),Mockito.eq(TOPOLOGY_URI),Mockito.eq(TOPOLOGY_DEST),Mockito.anyBoolean(),Mockito.anyBoolean());
  Assert.assertTrue(SchedulerUtils.setupWorkingDirectory(WORKING_DIR,CORE_RELEASE_URI,CORE_RELEASE_DEST,TOPOLOGY_URI,TOPOLOGY_DEST,isVerbose));
}
