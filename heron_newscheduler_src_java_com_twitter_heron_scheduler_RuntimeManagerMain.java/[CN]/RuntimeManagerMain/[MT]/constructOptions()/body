{
  Options options=new Options();
  Option cluster=Option.builder("c").desc("Cluster name in which the topology needs to run on").longOpt("cluster").hasArgs().argName("cluster").required().build();
  Option role=Option.builder("r").desc("Role under which the topology needs to run").longOpt("role").hasArgs().argName("role").required().build();
  Option environment=Option.builder("e").desc("Environment under which the topology needs to run").longOpt("environment").hasArgs().argName("environment").required().build();
  Option topologyName=Option.builder("n").desc("Name of the topology").longOpt("topology_name").hasArgs().argName("topology name").required().build();
  Option heronHome=Option.builder("d").desc("Directory where heron is installed").longOpt("heron_home").hasArgs().argName("heron home dir").required().build();
  Option configFile=Option.builder("p").desc("Path of the config files").longOpt("config_path").hasArgs().argName("config path").required().build();
  Option configOverrides=Option.builder("o").desc("Command line config overrides").longOpt("config_overrides").hasArgs().argName("config overrides").build();
  Option command=Option.builder("m").desc("Command to run").longOpt("command").hasArgs().required().argName("command to run").build();
  Option containerId=Option.builder("i").desc("Container Id for restart command").longOpt("container_id").hasArgs().argName("container id").build();
  options.addOption(cluster);
  options.addOption(role);
  options.addOption(environment);
  options.addOption(topologyName);
  options.addOption(configFile);
  options.addOption(configOverrides);
  options.addOption(command);
  options.addOption(heronHome);
  options.addOption(containerId);
  return options;
}
