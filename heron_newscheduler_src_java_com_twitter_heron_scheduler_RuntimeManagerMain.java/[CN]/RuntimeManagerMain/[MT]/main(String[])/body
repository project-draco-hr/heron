{
  String cluster=args[0];
  String role=args[1];
  String environ=args[2];
  String heronHome=args[3];
  String configPath=args[4];
  String configOverrideEncoded=args[5];
  String topologyName=args[6];
  String sCommand=args[7];
  String containerId=Integer.toString(-1);
  if (args.length == 9) {
    containerId=args[8];
  }
  IRuntimeManager.Command command=IRuntimeManager.Command.makeCommand(sCommand);
  Config.Builder defaultsConfig=Config.newBuilder().putAll(ClusterDefaults.getDefaults()).putAll(ClusterConfig.loadConfig(heronHome,configPath));
  Config.Builder commandLineConfig=Config.newBuilder().put(Keys.cluster(),cluster).put(Keys.role(),role).put(Keys.environ(),environ).put(Keys.topologyContainerIdentifier(),containerId);
  Config.Builder topologyConfig=Config.newBuilder().put(Keys.topologyName(),topologyName);
  Config config=Config.expand(Config.newBuilder().putAll(defaultsConfig.build()).putAll(commandLineConfig.build()).putAll(topologyConfig.build()).build());
  LOG.info("Static config loaded successfully ");
  LOG.info(config.toString());
  String statemgrClass=Context.stateManagerClass(config);
  IStateManager statemgr=(IStateManager)Class.forName(statemgrClass).newInstance();
  statemgr.initialize(config);
  String runtimeManagerClass=Context.runtimeManagerClass(config);
  IRuntimeManager runtimeManager=(IRuntimeManager)Class.forName(runtimeManagerClass).newInstance();
  boolean isSuccessful=false;
  try {
    boolean isValid=validateRuntimeManage(statemgr,topologyName);
    if (isValid) {
      LOG.info("Topology: " + topologyName + " to be "+ command+ "ed");
      isSuccessful=manageTopology(config,command,statemgr,runtimeManager);
    }
  }
  finally {
    statemgr.close();
    runtimeManager.close();
    if (!isSuccessful) {
      LOG.severe("Failed to " + command + " topology "+ topologyName);
      Runtime.getRuntime().exit(1);
    }
 else {
      LOG.info("Topology " + topologyName + " "+ command+ " successfully");
      Runtime.getRuntime().exit(0);
    }
  }
}
