{
  Options options=constructOptions();
  Options helpOptions=constructHelpOptions();
  CommandLineParser parser=new DefaultParser();
  CommandLine cmd=parser.parse(helpOptions,args,true);
  if (cmd.hasOption("h")) {
    usage(options);
    return;
  }
  try {
    cmd=parser.parse(options,args);
  }
 catch (  ParseException e) {
    LOG.severe("Error parsing command line options: " + e.getMessage());
    usage(options);
    System.exit(1);
  }
  Boolean verbose=false;
  Level logLevel=Level.INFO;
  if (cmd.hasOption("v")) {
    logLevel=Level.ALL;
    verbose=true;
  }
  LoggingHelper.loggerInit(logLevel,false);
  String cluster=cmd.getOptionValue("cluster");
  String role=cmd.getOptionValue("role");
  String environ=cmd.getOptionValue("environment");
  String heronHome=cmd.getOptionValue("heron_home");
  String configPath=cmd.getOptionValue("config_path");
  String topologyName=cmd.getOptionValue("topology_name");
  String commandOption=cmd.getOptionValue("command");
  String containerId=Integer.toString(-1);
  if (cmd.hasOption("container_id")) {
    containerId=cmd.getOptionValue("container_id");
  }
  IRuntimeManager.Command command=IRuntimeManager.Command.makeCommand(commandOption);
  Config.Builder defaultsConfig=Config.newBuilder().putAll(ClusterDefaults.getDefaults()).putAll(ClusterConfig.loadConfig(heronHome,configPath));
  Config.Builder commandLineConfig=Config.newBuilder().put(Keys.cluster(),cluster).put(Keys.role(),role).put(Keys.environ(),environ).put(Keys.topologyContainerId(),containerId);
  Config.Builder topologyConfig=Config.newBuilder().put(Keys.topologyName(),topologyName);
  Config config=Config.expand(Config.newBuilder().putAll(defaultsConfig.build()).putAll(commandLineConfig.build()).putAll(topologyConfig.build()).build());
  LOG.fine("Static config loaded successfully ");
  LOG.fine(config.toString());
  String statemgrClass=Context.stateManagerClass(config);
  IStateManager statemgr=(IStateManager)Class.forName(statemgrClass).newInstance();
  String runtimeManagerClass=Context.runtimeManagerClass(config);
  IRuntimeManager runtimeManager=(IRuntimeManager)Class.forName(runtimeManagerClass).newInstance();
  boolean isSuccessful=false;
  try {
    statemgr.initialize(config);
    SchedulerStateManagerAdaptor adaptor=new SchedulerStateManagerAdaptor(statemgr,5000);
    boolean isValid=validateRuntimeManage(adaptor,topologyName);
    if (isValid) {
      LOG.log(Level.FINE,"Topology: {0} to be {1}ed",new Object[]{topologyName,command});
      isSuccessful=manageTopology(config,command,adaptor,runtimeManager);
    }
  }
  finally {
    runtimeManager.close();
    statemgr.close();
  }
  if (!isSuccessful) {
    LOG.log(Level.SEVERE,"Failed to {0} topology {1}",new Object[]{command,topologyName});
    System.exit(1);
  }
 else {
    LOG.log(Level.INFO,"Topology {0} {1} successfully",new Object[]{topologyName,command});
    System.exit(0);
  }
}
