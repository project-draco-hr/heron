{
  LOG.info("Launching topology in local cluster");
  Map<String,String> localProperties=new HashMap<String,String>();
  localProperties.put(LocalConfig.HERON_EXECUTOR_BINARY,"heron-executor");
  localProperties.put(LocalConfig.HERON_SCHEDULER_BINARY,"heron-scheduler.jar");
  localProperties.put(LocalConfig.STMGR_BINARY,"heron-stmgr");
  localProperties.put(LocalConfig.TMASTER_BINARY,"heron-tmaster");
  localProperties.put(LocalConfig.HERON_SHELL_BINARY,"heron-shell");
  localProperties.put(LocalConfig.LOG_DIR,localConfig.getLogDir());
  localProperties.put(LocalConfig.HERON_INTERNALS_CONFIG_FILENAME,FileUtility.getBaseName(SubmitterMain.getHeronInternalsConfigFile()));
  localProperties.put(Constants.TOPOLOGY_DEFINITION_FILE,topology.getName() + ".defn");
  localProperties.put(LocalConfig.TOPOLOGY_ID,topology.getId());
  localProperties.put(LocalConfig.TOPOLOGY_JAR_FILE,FileUtility.getBaseName(SubmitterMain.getOriginalPackageFile()));
  localProperties.put(LocalConfig.TOPOLOGY_NAME,topology.getName());
  localProperties.put(LocalConfig.NUM_SHARDS,"" + (1 + TopologyUtility.getNumContainer(topology)));
  localProperties.put(LocalConfig.COMPONENT_RAMMAP,TopologyUtility.formatRamMap(TopologyUtility.getComponentRamMap(topology)));
  localProperties.put(LocalConfig.INSTANCE_DISTRIBUTION,TopologyUtility.packingToString(packing));
  localProperties.put(LocalConfig.CLASS_PATH,TopologyUtility.makeClasspath(topology));
  localProperties.put(LocalConfig.COMPONENT_JVM_OPTS_IN_BASE64,formatJavaOpts(TopologyUtility.getComponentJvmOptions(topology)));
  localProperties.put(LocalConfig.INSTANCE_JVM_OPTS_IN_BASE64,formatJavaOpts(TopologyUtility.getInstanceJvmOptions(topology)));
  localProperties.put(LocalConfig.METRICS_MGR_CLASSPATH,"metrics-mgr-classpath/*");
  localProperties.put(LocalConfig.PKG_TYPE,(FileUtility.isOriginalPackageJar(FileUtility.getBaseName(SubmitterMain.getOriginalPackageFile())) ? "jar" : "tar"));
  localProperties.put(LocalConfig.HERON_JAVA_HOME,localConfig.getJavaHome());
  localProperties.put(LocalConfig.WORKING_DIRECTORY,localConfig.getWorkingDirectory());
  localProperties.put(LocalConfig.HERON_CORE_RELEASE_PACKAGE,localConfig.getHeronCoreReleasePackage());
  if (!localSetup(localConfig)) {
    LOG.severe("Failed to complete the local setup...");
    return false;
  }
  for (  Map.Entry<Object,Object> entry : context.getConfig().entrySet()) {
    String key=(String)entry.getKey();
    if (!localProperties.containsKey(key)) {
      localProperties.put(key,(String)entry.getValue());
    }
  }
  StringBuilder localSchedulerConfig=new StringBuilder();
  for (  Map.Entry<String,String> kv : localProperties.entrySet()) {
    localSchedulerConfig.append(String.format(" %s=\"%s\" ",kv.getKey(),kv.getValue()));
  }
  String configInBase64=DatatypeConverter.printBase64Binary(localSchedulerConfig.toString().getBytes(Charset.forName("UTF-8")));
  String schedulerCmd=String.format("%s %s %s %s %s %s %s %s %d","java","-cp",localConfig.getWorkingDirectory() + "/" + localProperties.get(LocalConfig.HERON_SCHEDULER_BINARY),"com.twitter.heron.scheduler.service.SchedulerMain",topology.getName(),context.getSchedulerClass(),DefaultConfigLoader.class.getName(),configInBase64,NetworkUtility.getFreePort());
  return 0 == ShellUtility.runSyncProcess(true,true,schedulerCmd,new StringBuilder(),new StringBuilder(),new File(localConfig.getWorkingDirectory()));
}
