{
  int spoutParallelism=4;
  int boltParallelism=3;
  com.twitter.heron.api.Config topologyConfig=new com.twitter.heron.api.Config();
  long containerRam=10L * Constants.GB;
  long containerDisk=20L * Constants.GB;
  float containerCpu=30;
  topologyConfig.setContainerMaxRamHint(containerRam);
  topologyConfig.setContainerMaxDiskHint(containerDisk);
  topologyConfig.setContainerMaxCpuHint(containerCpu);
  TopologyAPI.Topology topologyExplicitResourcesConfig=getTopology(spoutParallelism,boltParallelism,topologyConfig);
  PackingPlan packingPlanExplicitResourcesConfig=getFirstFitDecreasingPackingPlan(topologyExplicitResourcesConfig);
  Assert.assertEquals(packingPlanExplicitResourcesConfig.containers.size(),1);
  Assert.assertEquals(Math.round(7 * instanceCpuDefault + (10 * 7 * instanceCpuDefault) / 100 + instanceCpuDefault),(long)packingPlanExplicitResourcesConfig.resource.cpu);
  Assert.assertEquals(7 * instanceRamDefault + (10 * 7 * instanceRamDefault) / 100 + instanceRamDefault,packingPlanExplicitResourcesConfig.resource.ram);
  Assert.assertEquals(7 * instanceDiskDefault + (10 * 7 * instanceDiskDefault) / 100 + instanceDiskDefault,packingPlanExplicitResourcesConfig.resource.disk);
  for (  PackingPlan.ContainerPlan containerPlan : packingPlanExplicitResourcesConfig.containers.values()) {
    Assert.assertEquals(Math.round(7 * instanceCpuDefault + (10 * 7 * instanceCpuDefault) / 100),(long)containerPlan.resource.cpu);
    Assert.assertEquals(7 * instanceRamDefault + (10 * 7 * instanceRamDefault) / 100,containerPlan.resource.ram);
    Assert.assertEquals(7 * instanceDiskDefault + (10 * 7 * instanceDiskDefault) / 100,containerPlan.resource.disk);
    Set<PackingPlan.Resource> resources=new HashSet<>();
    for (    PackingPlan.InstancePlan instancePlan : containerPlan.instances.values()) {
      resources.add(instancePlan.resource);
    }
    Assert.assertEquals(1,resources.size());
    Assert.assertEquals(instanceRamDefault,resources.iterator().next().ram);
  }
}
