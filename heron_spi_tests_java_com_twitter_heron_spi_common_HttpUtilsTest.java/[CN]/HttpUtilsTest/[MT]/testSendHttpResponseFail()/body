{
  HttpExchange exchange=Mockito.mock(HttpExchange.class);
  Mockito.doThrow(new IOException("Designed IO exception for testing")).when(exchange).sendResponseHeaders(Matchers.anyInt(),Matchers.anyLong());
  Assert.assertFalse(HttpUtils.sendHttpResponse(exchange,new byte[0]));
  Mockito.verify(exchange,Mockito.never()).getResponseBody();
  Mockito.doNothing().when(exchange).sendResponseHeaders(Matchers.anyInt(),Matchers.anyLong());
  OutputStream os=Mockito.mock(OutputStream.class);
  Mockito.doReturn(os).when(exchange).getResponseBody();
  Mockito.doThrow(new IOException("Designed IO exception for testing")).when(os).write(Matchers.any(byte[].class));
  Assert.assertFalse(HttpUtils.sendHttpResponse(exchange,new byte[0]));
  Mockito.verify(os,Mockito.atLeastOnce()).close();
  Mockito.doNothing().when(os).write(Matchers.any(byte[].class));
  Mockito.doThrow(new IOException("Designed IO exception for testing")).when(os).close();
  Assert.assertFalse(HttpUtils.sendHttpResponse(exchange,new byte[0]));
}
