{
  CommandLineParser parser=new DefaultParser();
  Options options=new Options();
  options.addOption(Option.builder("f").required(true).hasArg().longOpt("extra_action_file").desc("bazel extra action protobuf file").build());
  options.addOption(Option.builder("hc").required(true).hasArg().longOpt("heron_checkstyle_config_file").desc("checkstyle config file").build());
  options.addOption(Option.builder("ac").required(true).hasArg().longOpt("apache_checkstyle_config_file").desc("checkstyle config file for imported source files").build());
  try {
    CommandLine line=parser.parse(options,args);
    String extraActionFile=line.getOptionValue("f");
    String configFile=line.getOptionValue("hc");
    String apacheConfigFile=line.getOptionValue("ac");
    String[] heronSourceFiles=getHeronSourceFiles(extraActionFile);
    checkStyle(heronSourceFiles,configFile);
    String[] apacheSourceFiles=getApacheSourceFiles(extraActionFile);
    checkStyle(apacheSourceFiles,apacheConfigFile);
  }
 catch (  ParseException exp) {
    LOG.severe(String.format("Invalid input to %s: %s",CLASSNAME,exp.getMessage()));
    HelpFormatter formatter=new HelpFormatter();
    formatter.printHelp("java " + CLASSNAME,options);
  }
}
