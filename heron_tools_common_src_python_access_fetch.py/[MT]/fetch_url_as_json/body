@tornado.gen.coroutine
def fetch_url_as_json(fetch_url, default_value=None):
    '\n  Fetch the given url and convert the response to json.\n  :param fetch_url: URL to fetch\n  :param default_value: value to return in case of failure\n  :return:\n  '
    if (default_value is None):
        default_value = dict()
    Log.debug('fetching url %s', fetch_url)
    ret = default_value
    start = time.time()
    http_response = yield tornado.httpclient.AsyncHTTPClient().fetch(fetch_url)
    if http_response.error:
        Log.error('Unable to get response from %s. Error %s', fetch_url, http_response.error)
        raise tornado.gen.Return(ret)
    response = json.loads(http_response.body)
    if (not ('result' in response)):
        Log.error('Empty response from %s', fetch_url)
        raise tornado.gen.Return(ret)
    ret = response['result']
    execution = (1000 * response['executiontime'])
    end = time.time()
    duration = (1000 * (end - start))
    Log.debug('TIME: url fetch took %.2f ms server time %s', execution, fetch_url)
    Log.debug('TIME: url fetch took %.2f ms round trip  %s', duration, fetch_url)
    raise tornado.gen.Return(ret)
