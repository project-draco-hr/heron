{
  uploader=mock(IUploader.class);
  config=mock(IConfigLoader.class);
  packingAlgorithm=mock(IPackingAlgorithm.class);
  launcher=mock(ILauncher.class);
  stateManager=mock(SchedulerStateManagerAdaptor.class);
  SettableFuture<Boolean> trueFuture=SettableFuture.create();
  trueFuture.set(true);
  packingInfo=new HashMap<>();
  topology=createTopology(new Config());
  Map<String,List<String>> packing=new HashMap<>();
  packing.put("1",Arrays.asList("spout-1:1:0","spout-1:3:1","bolt-1:2:0"));
  context=spy(new LaunchContext(config,topology));
  when(packingAlgorithm.pack(eq(context))).thenReturn(TopologyUtilityTest.generatePacking(packing));
  when(stateManager.setExecutionState(any(ExecutionEnvironment.ExecutionState.class))).thenReturn(trueFuture);
  when(stateManager.setTopology(any(TopologyAPI.Topology.class))).thenReturn(trueFuture);
  when(stateManager.setTopology(eq(topology))).thenReturn(trueFuture);
  when(context.getStateManagerAdaptor()).thenReturn(stateManager);
  when(config.getSchedulerClass()).thenReturn(NullScheduler.class.getName());
  when(launcher.launchTopology(any(PackingPlan.class))).thenReturn(true);
  when(launcher.prepareLaunch(any(PackingPlan.class))).thenReturn(true);
  when(launcher.postLaunch(any(PackingPlan.class))).thenReturn(true);
  launchRunner=new LaunchRunner(launcher,context,packingAlgorithm);
}
