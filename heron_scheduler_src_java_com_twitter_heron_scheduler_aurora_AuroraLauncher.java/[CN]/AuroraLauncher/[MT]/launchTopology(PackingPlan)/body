{
  LOG.info("Launching topology in aurora");
  if (packing == null || packing.containers.isEmpty()) {
    LOG.severe("No container requested. Can't schedule");
    return false;
  }
  PackingPlan.Resource containerResource=packing.containers.values().iterator().next().resource;
  Map<String,String> auroraProperties=new HashMap<>();
  auroraProperties.put("CLASSPATH",TopologyUtility.makeClasspath(topology));
  auroraProperties.put("COMPONENT_JVM_OPTS_IN_BASE64",formatJavaOpts(TopologyUtility.getComponentJvmOptions(topology)));
  auroraProperties.put("COMPONENT_RAMMAP",TopologyUtility.formatRamMap(TopologyUtility.getComponentRamMap(topology)));
  auroraProperties.put("CPUS_PER_CONTAINER",containerResource.cpu + "");
  auroraProperties.put("DC",dc);
  auroraProperties.put("DISK_PER_CONTAINER",containerResource.disk + "");
  auroraProperties.put("ENVIRON",environ);
  auroraProperties.put("HERON_EXECUTOR_BINARY","heron-executor");
  auroraProperties.put("HERON_INTERNALS_CONFIG_FILENAME",FileUtility.getBaseName(SubmitterMain.getHeronInternalsConfigFile()));
  auroraProperties.put("HERON_JAVA_HOME",context.getProperty("heron.java.home.path",""));
  auroraProperties.put("INSTANCE_DISTRIBUTION",TopologyUtility.packingToString(packing));
  auroraProperties.put("INSTANCE_JVM_OPTS_IN_BASE64",formatJavaOpts(TopologyUtility.getInstanceJvmOptions(topology)));
  auroraProperties.put("ISPRODUCTION","" + "prod".equals(environ));
  auroraProperties.put("JOB_NAME",topology.getName());
  auroraProperties.put("LOG_DIR",context.getProperty("heron.logging.directory","log-files"));
  auroraProperties.put("HERON_PACKAGE",context.getPropertyWithException(Constants.HERON_RELEASE_TAG));
  auroraProperties.put("METRICS_MGR_CLASSPATH","metrics-mgr-classpath/*");
  auroraProperties.put("NUM_SHARDS","" + (1 + TopologyUtility.getNumContainer(topology)));
  auroraProperties.put("PKG_TYPE",(FileUtility.isOriginalPackageJar(FileUtility.getBaseName(SubmitterMain.getOriginalPackageFile())) ? "jar" : "tar"));
  auroraProperties.put("RAM_PER_CONTAINER",containerResource.ram + "");
  auroraProperties.put("RELEASE_ROLE",context.getProperty(Constants.HERON_RELEASE_USER_NAME,"heron"));
  auroraProperties.put("RUN_ROLE",role);
  auroraProperties.put("STMGR_BINARY","heron-stmgr");
  auroraProperties.put("TMASTER_BINARY","heron-tmaster");
  auroraProperties.put("SHELL_BINARY","heron-shell");
  auroraProperties.put("TOPOLOGY_DEFN",topology.getName() + ".defn");
  auroraProperties.put("TOPOLOGY_ID",topology.getId());
  auroraProperties.put("TOPOLOGY_JAR_FILE",FileUtility.getBaseName(SubmitterMain.getOriginalPackageFile()));
  auroraProperties.put("TOPOLOGY_NAME",topology.getName());
  auroraProperties.put("TOPOLOGY_PKG",PackerUtility.getTopologyPackageName(topology.getName(),context.getProperty(Constants.HERON_RELEASE_TAG,"live")));
  auroraProperties.put("VERSION",context.getProperty(PackerUploader.HERON_PACKER_PKGVERSION,"live"));
  auroraProperties.put("ZK_NODE",getZkHostPort());
  auroraProperties.put("ZK_ROOT",getZkRoot());
  ArrayList<String> auroraCmd=new ArrayList<>(Arrays.asList("aurora","job","create","--verbose","--wait-until","RUNNING"));
  for (  String binding : auroraProperties.keySet()) {
    auroraCmd.add("--bind");
    auroraCmd.add(String.format("%s=%s",binding,auroraProperties.get(binding)));
  }
  auroraCmd.add(String.format("%s/%s/%s/%s",auroraProperties.get("DC"),auroraProperties.get("RUN_ROLE"),auroraProperties.get("ENVIRON"),auroraProperties.get("JOB_NAME")));
  auroraCmd.add(HERON_AURORA);
  return 0 == ShellUtility.runProcess(true,auroraCmd.toArray(new String[auroraCmd.size()]),new StringBuilder(),new StringBuilder());
}
