import json, time
import logging
import tornado.httpclient
import tornado.gen
from tornado.options import options
from fetch import fetch_url_as_json
from query import QueryHandler
CLUSTER_URL_FMT = '%s/cluster'
TOPOLOGIES_URL_FMT = '%s/topologies'
EXECUTION_STATE_URL_FMT = ('%s/executionstate' % TOPOLOGIES_URL_FMT)
lOGICALPLAN_URL_FMT = ('%s/logicalplan' % TOPOLOGIES_URL_FMT)
PHYSICALPLAN_URL_FMT = ('%s/physicalplan' % TOPOLOGIES_URL_FMT)
METRICS_URL_FMT = ('%s/metrics' % TOPOLOGIES_URL_FMT)
METRICS_QUERY_URL_FMT = ('%s/metricsquery' % TOPOLOGIES_URL_FMT)
METRICS_TIMELINE_URL_FMT = ('%s/metricstimeline' % TOPOLOGIES_URL_FMT)
EXCEPTIONS_URL_FMT = ('%s/exceptions' % TOPOLOGIES_URL_FMT)
EXCEPTION_SUMMARY_URL_FMT = ('%s/exceptionsummary' % TOPOLOGIES_URL_FMT)
INFO_URL_FMT = ('%s/info' % TOPOLOGIES_URL_FMT)
PID_URL_FMT = ('%s/pid' % TOPOLOGIES_URL_FMT)
JSTACK_URL_FMT = ('%s/jstack' % TOPOLOGIES_URL_FMT)
JMAP_URL_FMT = ('%s/jmap' % TOPOLOGIES_URL_FMT)
HISTOGRAM_URL_FMT = ('%s/histo' % TOPOLOGIES_URL_FMT)
LOGFILE_DATA_URL_FMT = ('%s/logfiledata' % TOPOLOGIES_URL_FMT)
capacity = 'DIVIDE(  DEFAULT(0,    MULTIPLY(      TS({0},{1},__execute-count/default),      TS({0},{1},__execute-latency/default)    )  ),  60000000000)'
failures = 'DEFAULT(0,  DIVIDE(    TS({0},{1},__fail-count/default),    SUM(      DEFAULT(1, TS({0},{1},__execute-count/default)),      DEFAULT(0, TS({0},{1},__fail-count/default))    )  ))'
cpu = 'DEFAULT(0, TS({0},{1},__jvm-process-cpu-load))'
memory = 'DIVIDE(  DEFAULT(0, TS({0},{1},__jvm-memory-used-mb)),  DEFAULT(1, TS({0},{1},__jvm-memory-mb-total)))'
gc = 'RATE(TS({0},{1},__jvm-gc-collection-time-ms))'
queries = dict(cpu=cpu, capacity=capacity, failures=failures, memory=memory, gc=gc)
