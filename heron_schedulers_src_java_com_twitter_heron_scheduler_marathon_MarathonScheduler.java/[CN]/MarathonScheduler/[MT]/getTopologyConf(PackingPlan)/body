{
  ObjectMapper mapper=new ObjectMapper();
  Resource containerResource=SchedulerUtils.getMaxRequiredResource(packing);
  ArrayNode instances=mapper.createArrayNode();
  for (int i=0; i < Runtime.numContainers(runtime); i++) {
    ObjectNode instance=mapper.createObjectNode();
    instance.put(MarathonConstants.ID,Integer.toString(i));
    instance.put(MarathonConstants.COMMAND,getExecutorCommand(i));
    instance.put(MarathonConstants.CPU,containerResource.getCpu());
    instance.put(MarathonConstants.MEMORY,containerResource.getRam() / Constants.MB);
    instance.put(MarathonConstants.DISK,containerResource.getDisk() / Constants.MB);
    instance.set(MarathonConstants.PORT_DEFINITIONS,getPorts(mapper));
    instance.put(MarathonConstants.INSTANCES,1);
    instance.set(MarathonConstants.LABELS,getLabels(mapper));
    instance.set(MarathonConstants.FETCH,getFetchList(mapper));
    instance.put(MarathonConstants.USER,Context.role(config));
    instances.add(instance);
  }
  ObjectNode appConf=mapper.createObjectNode();
  appConf.put(MarathonConstants.ID,Runtime.topologyName(runtime));
  appConf.set(MarathonConstants.APPS,instances);
  return appConf.toString();
}
